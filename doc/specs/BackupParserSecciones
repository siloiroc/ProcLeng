referencia			::= referencia:refer POINT IDENTIFIER:id
						{: 
							//semanticErrorManager.semanticDebug("En Referencia-> refer.id");
							String referName = refer.getName();
							String innername = id.getLexema();
							
							TypeIF referType = refer.getType();	//Tipo de la referencia
							if(referType instanceof TypeRecord)	//Si es de tipo registro continuamos, si no es un tipo Record, mostraremos un error (else)
							{
								//TypeRecord tRec = (TypeRecord) referType;
								
								//Esto ya no es válido. Estaba guardando los símbolos de los campos del tipo Record en la tabla de símbolos, pero no se hace así. 
								//Sólo se guarda en la tabla de símbolos el símbolo de la variable declarada como Record
								//Obtenemos símbolo indicador por la referencia, de la Tabla de Símbolos
								ScopeIF scope = scopeManager.getCurrentScope();
								SymbolIF simboloReferencia = scopeManager.searchSymbol(referName);
								TypeIF tipoSimbReferencia = scopeManager.searchType(simboloReferencia.getType().getName());
								
										//Obtenemos símbolo indicado por la referencia, de la Tabla de Símbolos.
										ScopeIF scope = scopeManager.getCurrentScope();
										SymbolIF simbolo = scopeManager.searchSymbol(referName);
										TypeIF tipo = scopeManager.searchType(simbolo.getType().getName());
										//semanticErrorManager.semanticDebug("tipo=" + tipo.toString());						
										//semanticErrorManager.semanticDebug("tipo.getName()=" + tipo.getName());
								//Fin cambio 
								TypeRecord recPrueba = (TypeRecord) scopeManager.searchType("Tpersona");
								//semanticErrorManager.semanticDebug("Tamaño de la lista de campos del bloque de campos de TPersona: " + recPrueba.getBloqueCampos().getListaCamposRegistro().size());
								
								for (int i = 0 ; i<recPrueba.getBloqueCampos().getListaCamposRegistro().size(); i++)
								{
									DeclaracionVariable decvar = recPrueba.getBloqueCampos().getListaCamposRegistro().get(i);
									ArrayList<String> listaiden= decvar.getIdlist().getIdentifiersList();
								}
											
								TypeRecord tRec = (TypeRecord) tipo;
								//semanticErrorManager.semanticDebug("Antes de tRec.containsField");
								//semanticErrorManager.semanticDebug("tRec.getName()=" + tRec.getName());
								//semanticErrorManager.semanticDebug("Tamaño de la lista de campos del bloque de campos del tRec: " + tRec.getBloqueCampos().getListaCamposRegistro().size()); 
								for (int i = 0 ; i<tRec.getBloqueCampos().getListaCamposRegistro().size(); i++)
								{
									DeclaracionVariable decvar2 = tRec.getBloqueCampos().getListaCamposRegistro().get(i);
									ArrayList<String> listaiden2= decvar2.getIdlist().getIdentifiersList();
								}

								if(tRec.containsField(id.getLexema())){
									//semanticErrorManager.semanticDebug("DEBUG R001 - " + refer.getName() + " SI contiene campo " + id.getLexema());
									//semanticErrorManager.semanticDebug("EntRec.containsField");
									TypeIF innerType = scopeManager.searchType(scopeManager.searchSymbol(innername).getName());
									//TypeIF innerType = tRec.getType();
									
									//Generación de CódigoIntermedio
									Referencia ref = new Referencia(innerType, innername);
									TemporalFactoryIF tempFactory = new TemporalFactory(scope);
									TemporalIF refTemp = refer.getTemporal();
									TemporalIF refTempIndex = refer.getTemporalIndex();
									TemporalIF refTempOffset = tempFactory.create();
									IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
									codeBuilder.addQuadruples(refer.getIntermediateCode());
									
									TypeRecord rType = (TypeRecord)refer.getType();
									int idOffset	 = rType.getOffset(innername);
									codeBuilder.addQuadruple("MV", refTempOffset, idOffset);
									ref.setTemporal(refTemp);
									ref.setTemporalIndex(refTempIndex);
									ref.setTemporalOffset(refTempOffset);
									List intermediateCode = codeBuilder.create();
									ref.setIntermediateCode(intermediateCode);
									
									RESULT = ref;
								}
								else {
									semanticErrorManager.semanticDebug("ERROR R001 - " + referName + " NO contiene campo " + innerName);
								}
							}
							else semanticErrorManager.semanticDebug("ERROR R002-" + refer.getName() + " de tipo=" + refer.getType() + " NO es de tipo Registro(RECORD)");