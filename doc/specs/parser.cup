package compiler.syntax;

// Declaración de importaciones
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaración del código de usuario

action code {:

SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
ScopeManagerIF scopeManager = CompilerContext.getScopeManager ();
FinalCodeFactoryIF finalCodeFactory = CompilerContext.getFinalCodeFactory ();

:}

parser code {:
SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();

public void syntax_error(Symbol symbol)
{
Token token = (Token) symbol.value;
syntaxErrorManager.syntaxError ("Error sintactico, lexema:" + token.getLexema(), token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
{
Token token = (Token) symbol.value;
syntaxErrorManager.syntaxFatalError ("Error fatal", token);
}
:}



// Declaración de terminales
terminal Token IDENTIFIER;
terminal Token NUMBER;
terminal Token STRING;
//terminal Token AND;		// No implementado: grupo A
//terminal Token ARRAY;		// No implementado: grupo A
terminal Token BEGIN;
terminal Token BOOLEAN;
terminal Token CONSTANT;
terminal Token ELSE;
terminal Token END;
terminal Token FALSE;
terminal Token FOR;
terminal Token FUNCTION;
terminal Token IF;
terminal Token IN;
terminal Token INTEGER;
terminal Token IS;
terminal Token LOOP;
//terminal Token OF;		// No implementado: grupo A
terminal Token OR;
//terminal Token OUT;		// No implementado: grupo A
terminal Token PROCEDURE;
terminal Token PUTLINE;
terminal Token RECORD;
terminal Token RETURN;
terminal Token THEN;
terminal Token TRUE;
terminal Token TYPE;
//terminal Token WHILE; 	// No implementado: grupo A
 terminal Token BACKSLASH; 
// ?¿?¿?¿?¿?¿?¿? backslash ¿?¿?¿ 

terminal Token LEFTBRACKET;
terminal Token RIGHTBRACKET;
terminal Token DOUBLEPOINT;
terminal Token COMMA;
terminal Token SEMICOLON;
terminal Token COLON;
terminal Token PLUS;
//terminal Token MINUS; // No implementado: grupo A
//terminal Token LESSTHAN;// No implementado: grupo A
terminal Token GREATTHAN;
terminal Token EQUAL;
//terminal Token NOTEQUAL;// No implementado: grupo A
terminal Token ASSIGN;
terminal Token POINT;



// Declaración de no terminales
// no modificar los propuestos

non terminal program;
non terminal Axiom axiom;
non terminal Declaraciones declaraciones;
non terminal BloqueSentencias bloqueSentencias;
non terminal SeccionConstantes seccionConstantes;
non terminal SeccionTipos seccionTipos;
non terminal SeccionVariables seccionVariables;
non terminal SeccionSubprogramas seccionSubprogramas;
non terminal SeccionCuerpoPrograma seccionCuerpoPrograma;
non terminal DeclaracionConstante declaracionConstante;
non terminal DeclaracionTipos declaracionTipos;
non terminal DeclaracionVariables declaracionVariables;
non terminal DeclaracionSubprogramas declaracionSubprogramas;
non terminal BloqueParamSubprograma bloqueParamSubprograma;
non terminal ValorConstante valorConstante;
non terminal TipoPrimitivo tipoPrimitivo;
non terminal ListaIdentificadores listaIdentificadores;
non terminal Sentencia sentencia;
non terminal SentenciaIO sentenciaIO;
non terminal SentenciaAsignacion sentenciaAsignacion;
non terminal SentenciaIf sentenciaIf;
non terminal SentenciaReturn sentenciaReturn;
non terminal SentenciaLlamadaSubprograma sentenciaLlamadaSubprograma;
non terminal SentenciaFor sentenciaFor;
non terminal BloqueCamposRegistro bloqueCamposRegistro;
non terminal CampoRegistro campoRegistro;
non terminal ExpresionAccesoRegistro expresionAccesoRegistro;
non terminal Parametro parametro;
non terminal Expresion expresion;
non terminal ExpresionAritmetica expresionAritmetica;
non terminal ExpresionLogica expresionLogica;
non terminal ListaParametros listaParametros;
non terminal Empty empty;




// Declaración de relaciones de precedencia
precedence left POINT, LEFTBRACKET, RIGHTBRACKET;
precedence left PLUS;
precedence left GREATTHAN;
precedence left EQUAL;
precedence left OR;

// Declaración de reglas de producción


start with program;

program ::=
  {:
        syntaxErrorManager.syntaxInfo ("Starting parsing...");
   :}
  axiom:ax
  {:
   // No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  
   //List intermediateCode = ax.getIntermediateCode ();
   //finalCodeFactory.create (intermediateCode);

  
   syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   :};


axiom ::= ;

axiom ::= PROCEDURE IDENTIFIER LEFTBRACKET RIGHTBRACKET IS declaraciones
		  | PROCEDURE IDENTIFIER LEFTBRACKET error RIGHTBRACKET IS declaraciones{:syntaxErrorManager.syntaxInfo("ERROR 00x: Estructura programa - Procedimiento principal no puede tener parámetros");:}
		  | PROCEDURE IDENTIFIER LEFTBRACKET RIGHTBRACKET error declaraciones {:syntaxErrorManager.syntaxInfo("ERROR 001: Estructura programa, falta IS");:};
//		  | error {:syntaxErrorManager.syntaxInfo("ERROR 00X: Error general estructura programa");:};

//declaraciones ::= seccionConstantes seccionTiposGlobales seccionVarGlobales | empty;
declaraciones				::=	seccionConstantes;
seccionConstantes 			::= declaracionConstante seccionConstantes | seccionTipos;
seccionTipos				::= declaracionTipos seccionTipos | seccionVariables;
seccionVariables			::= declaracionVariables seccionVariables | seccionSubprogramas;
seccionSubprogramas			::= declaracionSubprogramas seccionSubprogramas | seccionCuerpoPrograma;
seccionCuerpoPrograma		::= BEGIN bloqueSentencias END IDENTIFIER SEMICOLON
								|BEGIN bloqueSentencias END error SEMICOLON {:syntaxErrorManager.syntaxInfo("ERROR 002: Estructura programa, falta NOMBRE_PROGRAMA en sentencia END");:}
								| error {:syntaxErrorManager.syntaxInfo("ERROR 003: Estructura programa");:};
								

listaIdentificadores ::= listaIdentificadores COMMA IDENTIFIER | IDENTIFIER;

// Declaración de constantes simbólicas
declaracionConstante ::= listaIdentificadores COLON CONSTANT ASSIGN valorConstante SEMICOLON {:syntaxErrorManager.syntaxDebug("En declaración constante");:}
						 | listaIdentificadores COLON CONSTANT error valorConstante {:syntaxErrorManager.syntaxInfo("ERROR 00x: Error en declaración constantes, operador asignación");:}
						 | listaIdentificadores COLON CONSTANT ASSIGN error {:syntaxErrorManager.syntaxInfo("ERROR 00x: Error en declaración constantes, valor incorrecto");:}
						 | listaIdentificadores COLON CONSTANT ASSIGN valorConstante error SEMICOLON{:syntaxErrorManager.syntaxInfo("ERROR 00x: Error en declaración constantes, falta punto y coma");:};
						 				 
						 
valorConstante ::= TRUE | FALSE | NUMBER;

// Declaración de tipos globales
declaracionTipos 		::= TYPE IDENTIFIER IS RECORD bloqueCamposRegistro END RECORD SEMICOLON;
bloqueCamposRegistro	::= campoRegistro SEMICOLON| bloqueCamposRegistro campoRegistro SEMICOLON;
campoRegistro			::= IDENTIFIER COLON tipoPrimitivo;
//ERROR: El tipo de un registro también puede ser otro registro, no sólo Integer y Boolean
 
// Declaración de variables globales
declaracionVariables	::= listaIdentificadores COLON tipoPrimitivo SEMICOLON;
tipoPrimitivo 			::= INTEGER | BOOLEAN | IDENTIFIER; 

// Declaración de subprogramas
declaracionSubprogramas		::= FUNCTION IDENTIFIER LEFTBRACKET bloqueParamSubprograma RIGHTBRACKET RETURN tipoPrimitivo IS seccionTipos 
								| PROCEDURE IDENTIFIER LEFTBRACKET bloqueParamSubprograma RIGHTBRACKET IS seccionTipos
								| FUNCTION IDENTIFIER LEFTBRACKET bloqueParamSubprograma RIGHTBRACKET error IS {:syntaxErrorManager.syntaxInfo("ERROR 00x: Error definición función, falta return");:};


bloqueParamSubprograma		::= bloqueParamSubprograma SEMICOLON listaIdentificadores COLON tipoPrimitivo
								| listaIdentificadores COLON tipoPrimitivo
								| empty;

// Bloque de sentencias
bloqueSentencias			::= sentencia SEMICOLON bloqueSentencias 
								| empty;								

sentencia		::= expresion | sentenciaAsignacion | sentenciaIf | sentenciaIO | sentenciaReturn | sentenciaFor;


// Expresiones
expresion	::= expresionAritmetica 
				| expresionLogica 
				| expresionAccesoRegistro 
				| LEFTBRACKET expresion RIGHTBRACKET
				| IDENTIFIER;

expresionAritmetica ::= expresion PLUS expresion 
						| NUMBER; 

expresionLogica		::= expresion OR expresion 
						| expresion GREATTHAN expresion
						| expresion EQUAL expresion
						| sentenciaLlamadaSubprograma
						| TRUE 
						| FALSE;
						
//expresionAccesoRegistro ::=	IDENTIFIER POINT IDENTIFIER;
expresionAccesoRegistro		::= IDENTIFIER POINT expresionAccesoRegistro | IDENTIFIER POINT IDENTIFIER;  
			
 
// Sentencia IO
sentenciaIO 	::= PUTLINE LEFTBRACKET parametro RIGHTBRACKET;
parametro		::= expresion | STRING;

//Sentencia Asignacion
//sentenciaAsignacion	::= IDENTIFIER ASSIGN expresionAritmetica 
//						| IDENTIFIER ASSIGN expresionLogica
//						| IDENTIFIER ASSIGN sentenciaLlamadaSubprograma
//						| expresionAccesoRegistro ASSIGN expresion;
sentenciaAsignacion		::= IDENTIFIER ASSIGN expresion
							| expresionAccesoRegistro ASSIGN expresion;  
						

//Sentencia If
//sentenciaIf				::= sentenciaIfEmparejada | sentenciaIfNoEmparejada;
//sentenciaIfEmparejada	::= IF (expresionLogica) bloqueSentencias ELSE sentenciaIfEmparejada;
//sentenciaIfNoEmparejada ::= IF (expresionLogica) bloqueSentencias | IF (expresionLogica) sentenciaIfEmparejada ELSE sentenciaIfNoEmparejada;

sentenciaIf			::= IF expresion THEN bloqueSentencias END IF | IF expresion THEN bloqueSentencias ELSE bloqueSentencias END IF;

// Sentencia de retorno de función
sentenciaReturn	::= RETURN expresion;

// Sentencia de llamada a subprograma
//sentenciaLlamadaSubprograma	::= IDENTIFIER LEFTBRACKET expresion RIGHTBRACKET;
sentenciaLlamadaSubprograma	::= IDENTIFIER LEFTBRACKET listaParametros RIGHTBRACKET;
listaParametros				::= listaParametros COMMA expresion | expresion | empty;


// Sentencia For
sentenciaFor	::=	FOR IDENTIFIER IN expresion DOUBLEPOINT expresion LOOP bloqueSentencias END LOOP;

empty ::= ;