package compiler.syntax;

// Declaración de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.semantic.util.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaración del código de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

	ArrayList<Integer> scopeSizes = new ArrayList<Integer>();

:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
		Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}

// Declaración de terminales (Ejemplo)

terminal Token IDENTIFIER;
terminal Token NUMBER;
terminal Token STRING;
//terminal Token AND;		// No implementado: grupo A
//terminal Token ARRAY;		// No implementado: grupo A
terminal Token BEGIN;
terminal Token BOOLEAN;
terminal Token CONSTANT;
terminal Token ELSE;
terminal Token END;
terminal Token FALSE;
terminal Token FOR;
terminal Token FUNCTION;
terminal Token IF;
terminal Token IN;
terminal Token INTEGER;
terminal Token IS;
terminal Token LOOP;
//terminal Token OF;		// No implementado: grupo A
terminal Token OR;
//terminal Token OUT;		// No implementado: grupo A
terminal Token PROCEDURE;
terminal Token PUTLINE;
terminal Token RECORD;
terminal Token RETURN;
terminal Token THEN;
terminal Token TRUE;
terminal Token TYPE;
//terminal Token WHILE; 	// No implementado: grupo A
 terminal Token BACKSLASH; 
// ?¿?¿?¿?¿?¿?¿? backslash ¿?¿?¿ 

terminal Token LEFTBRACKET;
terminal Token RIGHTBRACKET;
terminal Token DOUBLEPOINT;
terminal Token COMMA;
terminal Token SEMICOLON;
terminal Token COLON;
terminal Token PLUS;
//terminal Token MINUS; // No implementado: grupo A
//terminal Token LESSTHAN;// No implementado: grupo A
terminal Token GREATTHAN;
terminal Token EQUAL;
//terminal Token NOTEQUAL;// No implementado: grupo A
terminal Token ASSIGN;
terminal Token POINT;


// Declaración de no terminales
// no modificar los propuestos

non terminal program;
non terminal Axiom axiom;
non terminal Declaraciones declaraciones;
non terminal BloqueSentencias bloqueSentencias;
non terminal Declaraciones seccionConstantes;
non terminal Declaraciones seccionTipos;
non terminal Declaraciones seccionVariables;
non terminal Declaraciones seccionSubprogramas;
non terminal SeccionCuerpoPrograma seccionCuerpoPrograma;
non terminal DeclaracionConstante declaracionConstante;
non terminal DeclaracionTipo declaracionTipo;
non terminal DeclaracionVariable declaracionVariable;
non terminal DeclaracionSubprograma declaracionSubprograma;
//non terminal BloqueParamSubprograma bloqueParamSubprograma;
non terminal ParametrosFormales parametrosFormales;
non terminal ListaParametrosFormales listaParametrosFormales;
non terminal ValorConstante valorConstante;
non terminal TipoPrimitivo tipoPrimitivo;
non terminal ListaIdentificadores listaIdentificadores;
non terminal Sentencia sentencia;
non terminal SentenciaIO sentenciaIO;
non terminal SentenciaAsignacion sentenciaAsignacion;
non terminal SentenciaIf sentenciaIf;
non terminal SentenciaReturn sentenciaReturn;
non terminal LlamadaProcedimiento llamadaSubprograma;
non terminal SentenciaFor sentenciaFor;
non terminal BloqueCamposRegistro bloqueCamposRegistro;
non terminal ExpresionAccesoRegistro expresionAccesoRegistro;
non terminal Expresion expresion;
non terminal ExpresionAritmetica expresionAritmetica;
non terminal ExpresionLogica expresionLogica;
non terminal ParametrosActuales parametrosActuales;
non terminal Empty empty;
non terminal Referencia referencia;

// Declaración de relaciones de precedencia
precedence left POINT, LEFTBRACKET, RIGHTBRACKET;
precedence left PLUS;
precedence left GREATTHAN;
precedence left EQUAL;
precedence left OR;

// Declaración de reglas de producción


start with program;

program ::= 
  {: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   :}
  axiom:ax
  {: 
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		 		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//semanticErrorManager.semanticDebug("ax.IntermediateCode=" + intermediateCode.toString());
  		
  		//Solución de Foro: 
  		//Autor: ADMINISTRADOR CURSO
		//Fecha: Miércoles, Mayo 7, 2014 2:30pm
		//Hola,
		//	La excepción salta al invocar el método translate de un objeto de tipo ExecutionEnvironmentIF en la clase 
		//	FinalCodeFactory. Parece que no se crea un objeto ExecutionEnvironmentEns2001 o no se asigna bien.
		//	Puedes solucionarlo incluyendo dentro de parser.cup una llamada al método setEnvironment del objeto 
		//	finalCodeFactory, pasandole por parámetro un nuevo objeto ExecutionEnvironmentEns2001.
  		
  		
  		//finalCodeFactory.create (intermediateCode);

  		int gAddress = 0;	//Almacenará el valor total que ocupan todas las variables globales
  		int lOffset  = 0;
  		List<ScopeIF> scopes = scopeManager.getAllScopes();
  		for (ScopeIF scope : scopes)
  		{
  			List<SymbolIF> symbols = scope.getSymbolTable().getSymbols();						 			
  			for (SymbolIF s : symbols)
  			{
  				if (s instanceof SymbolVariable)
  				{
  					SymbolVariable symvar = (SymbolVariable) s;
  					if (scope.getLevel() == 0)
  					{ //Si la variable es global, establecemos su dirección comenzando en la pos.0 de memoria
  						symvar.setAddress(gAddress);
  						semanticErrorManager.semanticDebug("MEMORIA, dirección de de la variable: " + symvar.getName() + " con valor=" + symvar.getValue() + " dir=" + gAddress);
  						semanticErrorManager.semanticDebug("MEMORIA, tamaño de de la variable: " + symvar.getName() + " es=" + symvar.getType().getSize());
  						semanticErrorManager.semanticDebug("MEMORIA, el tipo de la variable: " + symvar.getName() + " es=" + symvar.getType());
  						TypeIF symtype = symvar.getType();
  						if (symtype instanceof TypeRecord){
  							TypeRecord tR = (TypeRecord) symtype;
  							gAddress += tR.getMemorySize();
  						}
  						else
  							gAddress += symvar.getType().getSize();
  						
  					}
  					else
  					{ //Variable no global
 						symvar.setAddress(lOffset + symvar.getType().getSize());
 						//lOffset += symvar.getAddress();
 						lOffset += symvar.getType().getSize();
 					}
  				}
  				//semanticErrorManager.semanticDebug("Tamaño total de reserva de espacio de memoria para variables globales = " + gAddress);  				
  				//semanticErrorManager.semanticDebug("Programa comenzará en dirección = " + (gAddress + 1));
  			}
  			
  			List<TemporalIF> temporals = scope.getTemporalTable().getTemporals();
  			for (TemporalIF t : temporals){
  				Temporal temp = (Temporal) t;
  				temp.setAddress (lOffset + temp.getSize());
  				//semanticErrorManager.semanticDebug("Temporal =" + temp.toString() + " address= " + (lOffset+temp.getSize()));
  				lOffset += temp.getSize();
  			}
  			scopeSizes.add(lOffset);	//Añadimos el tamaño que ocupan las variables y temporales en cada ámbito a la lista de tamaños de ámbitos.
  			lOffset = 0;
  		}
  		 		
  			IntermediateCodeBuilder codeBuilder = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
  			//codeBuilder.addQuadruple("DATA", gAddress);
  			
  			//En la cuádrupla de inicio indicamos la dirección final que ocupan las varibles globales en memoria, así como el tamaño del ámbito 0 (variables + temporales)
  			semanticErrorManager.semanticDebug("Antes de QUAD INICIO, gAddress=" + gAddress + " scopeSizes(0)=" + scopeSizes.get(0));
//  			codeBuilder.addQuadruple("INICIO", new Value(gAddress));
  			codeBuilder.addQuadruple("INICIO", new Value(gAddress), new Value(scopeSizes.get(0)));
  			
  			List intermediateCode = ax.getIntermediateCode ();
  			codeBuilder.addQuadruples(intermediateCode);
  			codeBuilder.addQuadruple("FIN");
	  		//Añadimos todas las etiquetas y sentencias Data
	  		codeBuilder.addQuadruple("DATA");
  			
  			ExecutionEnvironmentEns2001 execEnvironment = new ExecutionEnvironmentEns2001();
  			finalCodeFactory.setEnvironment(execEnvironment); 		
  			finalCodeFactory.create(codeBuilder.create());
  			
  			
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   :};


axiom ::= PROCEDURE IDENTIFIER:id
			{:
			//Creación del ámbito global del programa
				String name = id.getLexema();
				scopeManager.openScope(name);
				ScopeIF scope = scopeManager.getCurrentScope();
				//semanticErrorManager.semanticDebug("El nombre del scope creado es: " + scope.getName());
				
				//Obtenemos la tabla de tipos del ámbito actual
				TypeTableIF tablaTipos = scope.getTypeTable();
				//semanticErrorManager.semanticDebug("Tabla de tipos obtenida, pertenece al scope/ámbito: " + tablaTipos.getScope().getName() + " y tiene tamaño: " + tablaTipos.getSize()); 
				
				//Insertar todos los TypeSimple en la Tabla de Tipos
				TypeSimple typeBoolean = new TypeSimple(scope, "BOOLEAN");
				TypeSimple typeInteger = new TypeSimple(scope, "INTEGER");
				tablaTipos.addType("BOOLEAN", typeBoolean);
				tablaTipos.addType("INTEGER", typeInteger); 
				//semanticErrorManager.semanticDebug("Tabla de tipos obtenida del scope/ámbito: " + tablaTipos.getScope().getName() + " y tiene tamaño: " + tablaTipos.getSize());
				List<TypeIF> listaTipos = tablaTipos.getTypes();
				//semanticErrorManager.semanticDebug("TT contiente tipo Boolean??" + tablaTipos.containsType("Boolean"));
					//semanticErrorManager.semanticDebug("TT contiente tipo Integer??" + tablaTipos.containsType("Integer"));
					//semanticErrorManager.semanticDebug("TT contiente tipo Pepe??" + tablaTipos.containsType("Pepe"));
				//for (int i=0; i<listaTipos.size(); i++){
//					semanticErrorManager.semanticDebug("Nombre de tipo: " + listaTipos.get(i).getName());
				//}
				
				//scopeManager.closeScope();
				//semanticErrorManager.semanticDebug("Scope cerrado: " + scope.getName());
			:} LEFTBRACKET RIGHTBRACKET IS 
			{:
				semanticErrorManager.semanticDebug("***** INICIO DECLARACIONES *****");
			:} declaraciones:decls
			{:
				//Nuevo objeto Axioma (extends Axiom, que es abstract)
				Axioma axioma = new Axioma();
				
				//Generación de Código Intermedio
				ScopeIF scope = scopeManager.getCurrentScope();
				IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
				axioma.setIntermediateCode(decls.getIntermediateCode());
				
				semanticErrorManager.semanticDebug("CI - AXIOMA->Decls = " + axioma.getIntermediateCode());								
							
				RESULT = axioma;
			:};
//		  | PROCEDURE IDENTIFIER LEFTBRACKET error RIGHTBRACKET IS declaraciones{:syntaxErrorManager.syntaxInfo("ERROR 00x: Estructura programa - Procedimiento principal no puede tener parámetros");:}
//		  | PROCEDURE IDENTIFIER LEFTBRACKET RIGHTBRACKET error declaraciones {:syntaxErrorManager.syntaxInfo("ERROR 001: Estructura programa, falta IS");:};
//		  | error {:syntaxErrorManager.syntaxInfo("ERROR 00X: Error general estructura programa");:};

//declaraciones ::= seccionConstantes seccionTiposGlobales seccionVarGlobales | empty;
declaraciones				::= {: semanticErrorManager.semanticDebug("En declaraciones -> seccionConstantes");
									semanticErrorManager.semanticDebug("******* INICIO SECCION CONSTANTES *********");
								:} seccionConstantes:seccConst
								{:	
									semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI-Declaraciones=" + seccConst.getIntermediateCode());
									RESULT = seccConst;
								:};
seccionConstantes 			::= declaracionConstante:declConst seccionConstantes:seccConst
								{:
									//Generación de Código Intermedio
									Declaraciones declSeccConst = new Declaraciones();
									ScopeIF scope = scopeManager.getCurrentScope();
									IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
									codeBuilder.addQuadruples(declConst.getIntermediateCode());
									codeBuilder.addQuadruples(seccConst.getIntermediateCode());
									List intermediateCode = codeBuilder.create();					
									declSeccConst.setIntermediateCode(intermediateCode);					

									semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI-seccionConstantes -> declConst seccConst=" + declSeccConst.getIntermediateCode());
									RESULT = declSeccConst;
								:}
								| seccionTipos:seccTipos
								{: 
									semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI-seccionConstantes->seccionTipos=" + seccTipos.getIntermediateCode());
									RESULT = seccTipos; 
								:} ;
seccionTipos				::= declaracionTipo:declTipo seccionTipos:seccTipos
								{:
									//Generación de Código Intermedio
									Declaraciones declSeccTipos = new Declaraciones();
									ScopeIF scope = scopeManager.getCurrentScope();
									IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
									codeBuilder.addQuadruples(declTipo.getIntermediateCode());
									codeBuilder.addQuadruples(seccTipos.getIntermediateCode());
									List intermediateCode = codeBuilder.create();					
									declSeccTipos.setIntermediateCode(intermediateCode);					

									semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI-seccionTipos->declTipo seccionTipos=" + declSeccTipos.getIntermediateCode());
									RESULT = declSeccTipos;
								:} 
								| seccionVariables:seccVars
								{: 
									semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI-seccionTipos->seccionVars=" + seccVars.getIntermediateCode());
									RESULT = seccVars;   
								:};
seccionVariables			::= declaracionVariable:declVar 
								{:
									Util util = new Util();
									semanticErrorManager.semanticDebug("SIZE de DECLVARIABLE=" + declVar.getSize());
									
									for(int i = 0; i < declVar.getSize(); i++){
									semanticErrorManager.semanticDebug("Añadiendo VARS a TS, size = " + declVar.getSize());
									// Símbolos de las variables no existen en TS, por lo que añadimos cada uno de ellos a la Tabla de Símbolos (SymbolVariable).
										SymbolVariable symbolVar = new SymbolVariable(scopeManager.getCurrentScope(), declVar.getIdentifiersListItem(i), declVar.getType());
									util.addToSymbolTable(scopeManager.getCurrentScope(), symbolVar);
									}
								:}
								SEMICOLON seccionVariables:seccVars
								{:
									//Generación de Código Intermedio
									Declaraciones declSeccVars = new Declaraciones();
									ScopeIF scope = scopeManager.getCurrentScope();
									IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
									codeBuilder.addQuadruples(declVar.getIntermediateCode());
									codeBuilder.addQuadruples(seccVars.getIntermediateCode());
									List intermediateCode = codeBuilder.create();					
									declSeccVars.setIntermediateCode(intermediateCode);					
								    
								    semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI-seccionVariables->declVar seccVars=" + declSeccVars.getIntermediateCode() );
									RESULT = declSeccVars;
								:} 
							    |  seccionSubprogramas:seccSubProgs
							    {:
								    semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI-seccionVariables->seccSubProgs=" + seccSubProgs.getIntermediateCode()); 
							    	RESULT = seccSubProgs;   
							    :};
seccionSubprogramas			::= {: semanticErrorManager.semanticDebug("***** INICIO SUBPROGRAMAS *****"); :} 
									declaracionSubprograma:declSubProg seccionSubprogramas:seccSubProg
								{:
									//Generación de Código Intermedio
									Declaraciones declSeccSubprog = new Declaraciones();
									ScopeIF scope = scopeManager.getCurrentScope();
									IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
									codeBuilder.addQuadruples(declSubProg.getIntermediateCode());
									codeBuilder.addQuadruples(seccSubProg.getIntermediateCode());
									List intermediateCode = codeBuilder.create();					
									declSeccSubprog.setIntermediateCode(intermediateCode);					
								
									semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI-seccionSubProgs->declSubProg seccSubProg=" + declSeccSubprog.getIntermediateCode());
									RESULT = declSeccSubprog;
								:} 
								| {: semanticErrorManager.semanticDebug("***** FIN DECLARACIONES *****");:} 
									seccionCuerpoPrograma:seccCuerpoProg
								 {:

									Declaraciones seccionSubProg = new Declaraciones();
									//Copia de código intermedio
									seccionSubProg.setIntermediateCode(seccCuerpoProg.getIntermediateCode());
									
								    semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI-seccionSubProgs->seccCuerpoProg=" + seccionSubProg.getIntermediateCode());									
									RESULT = seccionSubProg;
									
									
									//Generación de Código Intermedio
									//ScopeIF scope = scopeManager.getCurrentScope();
									//IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
									//codeBuilder.addQuadruples(seccCuerpoProg.getIntermediateCode());
									//List intermediateCode = codeBuilder.create();					
									//seccionSubProg.setIntermediateCode(intermediateCode);					
									//semanticErrorManager.semanticDebug("CI - SECCIONSUBPROGRAMAS = " + seccionSubProg.getIntermediateCode());								
									//RESULT = seccionSubProg;
								:};
seccionCuerpoPrograma		::= {: 	
									
									semanticErrorManager.semanticDebug("***************** INICIO CUERPO PROGRAMA ****************"); 
								:} 
								BEGIN 
								{: semanticErrorManager.semanticDebug("*******************Inicio BloqueSentencias*******************"); :}
								bloqueSentencias:bloqueSent 
								{:
									semanticErrorManager.semanticDebug("*******************Fin BloqueSentencias************************");
									ScopeIF scope = scopeManager.getCurrentScope();
									//semanticErrorManager.semanticDebug("SCOPE ACTUAL=" + scopeManager.getCurrentScope().getName());
									//semanticErrorManager.semanticDebug("LEVEL SCOPE ACTUAL=" + scopeManager.getCurrentScope().getLevel());									
									if(scope.getLevel() > 0)
									{	//Si no somos el programa principal, debemos devolver una sentencia return
										//Pero sólo si somos una función. Obtenemos el nombre del subprograma en el que estamos
										//consultando el nombre del ámbito actual, y a partir de ese nombre, obtenemos el símbolo 
										//de la función buscando en las tablas de Símbolos 
										 
										SymbolIF symbol = scopeManager.searchSymbol(scope.getName());
										if (symbol instanceof SymbolFunction)
										{	 
											if (!bloqueSent.isExisteReturn())
											{
												semanticErrorManager.semanticFatalError("ERROR - No existe sentenciaReturn en la función'" +
														symbol.getName() + "'");
											}								
										} 
									}
									
									SeccionCuerpoPrograma cuerpoProg = new SeccionCuerpoPrograma();
									
									//Generación de Código Intermedio
									IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
									codeBuilder.addQuadruples(bloqueSent.getIntermediateCode());
									List intermediateCode = codeBuilder.create();					
									cuerpoProg.setIntermediateCode(intermediateCode);					
									semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI - CUERPOPROGRAMA->bloqueSent = " + cuerpoProg.getIntermediateCode());								
									RESULT = cuerpoProg;
									 
								:} END IDENTIFIER SEMICOLON
								{:semanticErrorManager.semanticDebug("************** FIN CUERPO PROGRAMA*****************");:}
								;
//								|BEGIN bloqueSentencias END error SEMICOLON {:syntaxErrorManager.syntaxInfo("ERROR 002: Estructura programa, falta NOMBRE_PROGRAMA en sentencia END");:}
//								| error {:syntaxErrorManager.syntaxInfo("ERROR 003: Estructura programa");:};
								

listaIdentificadores ::= listaIdentificadores:idlist COMMA IDENTIFIER:id
						{:
							String name = id.getLexema();
							ListaIdentificadores identifierList = idlist;
							identifierList.addIdentifier(name);
							RESULT = identifierList;
							
							
							//Verificamos si el identificador está en la tabla de símbolos
//							ScopeIF scope = scopeManager.getCurrentScope();
//							Util util = new Util();
//							
//							if(!util.checkSymbolTableScope(scope, name))
//							{
//								//Si no existe el símbolo en ámbitos abiertos, lo creamos y añadimos a ListaIdentificadores
//								ListaIdentificadores identifierList = idlist;
//								identifierList.addIdentifier(name);
//								RESULT = identifierList;							
//							}
//							else
//								semanticErrorManager.semanticFatalError("ERROR LI001: ID=" + name + " ya definido");
						:}
						  | IDENTIFIER:id
						  {:	
						  	String name = id.getLexema();
						  	ListaIdentificadores identifierList = new ListaIdentificadores(name);
							RESULT = identifierList;
						  	
//						  	ScopeIF scope = scopeManager.getCurrentScope();
//							Util util = new Util();
//							if(!util.checkSymbolTableScope(scope, name))
//							{
//								ListaIdentificadores idlist = new ListaIdentificadores(name);
//								RESULT = idlist;
//							}
//							else 
//								semanticErrorManager.semanticFatalError("ERROR LI001: ID=" + name + "ya definido");  
						  :};


// Declaración de constantes simbólicas
declaracionConstante ::=  listaIdentificadores:lid COLON CONSTANT 
							{: 	semanticErrorManager.semanticDebug("**DECLARACION CONSTANTE**"); 
								//semanticErrorManager.semanticDebug("En declaracionConstante -> listaIdentificadores : CONSTANT := valorConstante;");
							:}	
							ASSIGN valorConstante:vc SEMICOLON 
							{:  //syntaxErrorManager.syntaxDebug("En declaración constante");
								
								ScopeIF scope = scopeManager.getCurrentScope();
								Util util = new Util();
																
								//Verificamos si los identificadores de la lista están ya definidos en la Tabla de Símbolos 
								for(int i = 0; i < lid.getSize(); i++){
									if(util.checkSymbolTableScope(scope, lid.getIdentifiersListItem(i)))
										semanticErrorManager.semanticFatalError("ERROR CONST001: en declaración de Constantes, ya existe declaración de " + lid.getIdentifiersListItem(i));
									else{
										// Símbolos no existen en TS, por lo que añadimos cada uno de ellos a la TS.
										SymbolConstant symbolConstant;																					
										if (vc.getValue().equals("TRUE") || vc.getValue().equals("FALSE")){
											symbolConstant = new SymbolConstant(scope, lid.getIdentifiersListItem(i), scopeManager.searchType("BOOLEAN"));
										}
										else{
											symbolConstant = new SymbolConstant(scope, lid.getIdentifiersListItem(i), scopeManager.searchType("INTEGER"));
										}
										symbolConstant.setValue(vc.getValue());
										//semanticErrorManager.semanticDebug("Construido SymbolConstant, con: " + scope + ", " + lid.getIdentifiersListItem(i) + "," + scopeManager.searchType("INTEGER").getName());  
										//Añadimos símbolos constantes a la Tabla de Símbolos
										util.addToSymbolTable(scope, symbolConstant);
										
										
										DeclaracionConstante declConstante = new DeclaracionConstante(vc.getType(), lid);
										RESULT = declConstante;										

									}
								}
							:};
							 
// 						 | listaIdentificadores COLON CONSTANT error valorConstante {:syntaxErrorManager.syntaxInfo("ERROR 00x: Error en declaración constantes, operador asignación");:}
//						 | listaIdentificadores COLON CONSTANT ASSIGN error {:syntaxErrorManager.syntaxInfo("ERROR 00x: Error en declaración constantes, valor incorrecto");:}
//						 | listaIdentificadores COLON CONSTANT ASSIGN valorConstante error SEMICOLON{:syntaxErrorManager.syntaxInfo("ERROR 00x: Error en declaración constantes, falta punto y coma");:};
						 				 
						 
valorConstante ::= TRUE:vc 
						{: 
							//semanticErrorManager.semanticDebug("En valorConstante -> TRUE");
							//ValorConstante valConst = new ValorConstante(vc.getLexema().toUpperCase());
							ValorConstante valConst = new ValorConstante(vc.getLexema().toUpperCase(), new TypeSimple(scopeManager.getCurrentScope(), "BOOLEAN"));
					   		RESULT = valConst; 
					   :}
				   | FALSE:vc
				   		{:	
				   			//semanticErrorManager.semanticDebug("En valorConstante -> FALSE");
				   			//ValorConstante valConst = new ValorConstante(vc.getLexema().toUpperCase());
				   			ValorConstante valConst = new ValorConstante(vc.getLexema().toUpperCase(), new TypeSimple(scopeManager.getCurrentScope(), "BOOLEAN"));
				   			RESULT = valConst; 
				   		:} 
				   | NUMBER:num 
				   	 	{: 	
							//semanticErrorManager.semanticDebug("En valorConstante -> NUM");
				   	 		//ValorConstante valConst = new ValorConstante(num.getLexema());
				   	 		ValorConstante valConst = new ValorConstante(num.getLexema(), new TypeSimple(scopeManager.getCurrentScope(), "INTEGER"));
				   	 		RESULT = valConst;
				   	 	:};
// Declaración de tipos globales
declaracionTipo 		::= {:semanticErrorManager.semanticDebug("**DECLARACION TIPO**");:} 
							TYPE IDENTIFIER:id IS RECORD bloqueCamposRegistro:bcr END RECORD SEMICOLON 
							{:					
								semanticErrorManager.semanticDebug("En declaracionTipo -> TYPE id IS RECORD bloqueCamposRegistro END RECORD;");							
								semanticErrorManager.semanticDebug("**Declaración Tipo: " + id.getLexema() + "******");
								semanticErrorManager.semanticDebug("**********************************");
								// Obtenemos la tabla de tipos del ámbito actual,y verificamos si el tipo está definido ya en TT, si no, lo añadimos
								ScopeIF scope = scopeManager.getCurrentScope();								
								TypeTableIF tablaTipos = scope.getTypeTable();
								if(tablaTipos.containsType(id.getLexema()))
										semanticErrorManager.semanticFatalError("ERROR - Error en declaración de Tipo, ya existe declaración de " + id.getLexema());
								else{ 
									//Creamos nuevo tipo Registro y lo introducimos en la tabla de tipos
									TypeRecord typeRecord = new TypeRecord(scope, id.getLexema(), bcr);
									tablaTipos.addType(id.getLexema(), typeRecord);
									
//									//Añadimos los campos del bloqueCamposRegistro al tipo Registro
//									int offset = 0; 
//									for (int i=0; i< bcr.getSize(); i++)
//									{	
//										semanticErrorManager.semanticDebug("Añadiendo Registro====" + i);
//										DeclaracionVariable decVarRegistro = (DeclaracionVariable) bcr.getDeclaracionVariableId(i);
//										for (int j=0; j < decVarRegistro.getSize(); j++)
//										{
//											//Creamos un símbolo SymbolVariable por cada variable
//											SymbolVariable symbolVarReg = new SymbolVariable(scopeManager.getCurrentScope(), decVarRegistro.getIdentifiersListItem(j), decVarRegistro.getType());
//											symbolVarReg.setOffset(offset);
//											offset++;
//											//Añadimos 
//											if (typeRecord.containsField(decVarRegistro.getIdentifiersListItem(j)))
//												semanticErrorManager.semanticFatalError("ERROR TYPE001: La variable " + decVarRegistro.getIdentifiersListItem(j) + " ya ha sido definida en el tipo estructurado");
//											else
//												typeRecord.addCampoRegistro(decVarRegistro.getIdentifiersListItem(j), decVarRegistro.getType());											
//										}
//										
//									}
									
									DeclaracionTipo decTipo = new DeclaracionTipo(typeRecord);
									RESULT = decTipo;										
								}
								semanticErrorManager.semanticDebug("FIN**Declaración Tipo: " + id.getLexema() + "******");
								semanticErrorManager.semanticDebug("**********************************");								
							:};
												
bloqueCamposRegistro	::=	declaracionVariable:decVar SEMICOLON bloqueCamposRegistro:bcr 
							{:
								semanticErrorManager.semanticDebug("En bloqueCamposRegistro -> bloqueCamposRegistro declaracionVariable;");
								BloqueCamposRegistro bloquecampos = bcr;
								bloquecampos.addCampoRegistro(decVar);
								RESULT = bloquecampos;													
							:} 
							| declaracionVariable:decVar SEMICOLON
							{:
								semanticErrorManager.semanticDebug("En bloqueCamposRegistro -> declaracionVariable");
								BloqueCamposRegistro bloqueCampos = new BloqueCamposRegistro(decVar);
								RESULT = bloqueCampos;
							:}; 
  

// Declaración de variables globales
declaracionVariable		::= listaIdentificadores:lid COLON 
								{:
									semanticErrorManager.semanticDebug("**DECLARACION VARIABLE**"); 
									//semanticErrorManager.semanticDebug("En declaracionVariable -> listaIdentificadores : tipoPrimitivo;");
								:} tipoPrimitivo:tp
							{:	
								ScopeIF scope = scopeManager.getCurrentScope();
								Util util = new Util();
								//Verificamos si los identificadores de la lista están ya definidos en la Tabla de Símbolos
								for(int i = 0; i < lid.getSize(); i++){
								semanticErrorManager.semanticDebug("En la lista de identificadores, size con GetSIZE=" + lid.getSize());
									if(util.checkSymbolTableScope(scope, lid.getIdentifiersListItem(i))){
										semanticErrorManager.semanticFatalError("ERROR VAR001: en declaración de Variable, ya existe declaración de " + lid.getIdentifiersListItem(i));
									}
									else{ 
										//Ojo, no hacemos esto aquí, ya que esto es compartido por la declaración de variables dentro de un tipo Registro,
										//Muevo el añadir a la tabla de Símbolos al nodo superior del árbol (seccionVariables)
										
										// Símbolos no existen en TS, por lo que añadimos cada uno de ellos a la Tabla de Símbolos (SymbolVariable).
										//SymbolVariable symbolVariable = new SymbolVariable(scope, lid.getIdentifiersListItem(i), scopeManager.searchType(tp.getType().getName()));
										//semanticErrorManager.semanticDebug("Construido SymbolVariable, con: " + scope + ", " + lid.getIdentifiersListItem(i) + "," + tp.getType().getName());  
										//util.addToSymbolTable(scope, symbolVariable);
										//semanticErrorManager.semanticDebug("Añadimos a tabla de Símbolos el identificador (ahora SymbolVariable)=" + symbolVariable.toString());
										
										DeclaracionVariable decVariable = new DeclaracionVariable(tp.getType(), lid);
										RESULT = decVariable;										
									}
								}
							
							:};

tipoPrimitivo 			::= INTEGER:tpint
								 {: 
								 	ScopeIF scope = scopeManager.getCurrentScope();
								 	TipoPrimitivo tipoPrim = new TipoPrimitivo(new TypeSimple(scope, "INTEGER"), tpint.getLexema().toUpperCase());
								 	RESULT = tipoPrim;
								 :}
							| BOOLEAN:tpbool
								 {: 
								 	ScopeIF scope = scopeManager.getCurrentScope();
								 	TipoPrimitivo tipoPrim = new TipoPrimitivo(new TypeSimple(scope, "BOOLEAN"), tpbool.getLexema().toUpperCase());
								 	RESULT = tipoPrim;
								 :}
							| IDENTIFIER:id
								{:	
									String name = id.getLexema();
									if(scopeManager.containsType(name)){
										TypeIF type = scopeManager.searchType(name);
										RESULT = new TipoPrimitivo(type);
									}
									else{
										semanticErrorManager.semanticFatalError("ERROR PRIM001: - Tipo estructurado: " + name + " no definido");
									}

								:};
 

// Declaración de subprogramas						
declaracionSubprograma		::= FUNCTION IDENTIFIER:id
								{:
									semanticErrorManager.semanticDebug("Declaración función: FUNCTION " + id.getLexema());
									if(!(scopeManager.containsSymbol(id.getLexema()) && scopeManager.containsType(id.getLexema()) ))
									{								
										//Creamos nuevo ámbito
										ScopeIF childScope = scopeManager.openScope(id.getLexema());
										//semanticErrorManager.semanticDebug("CHILDScope=" + childScope.getName() + "(Level=" + childScope.getLevel() + "),Id=" + childScope.getId());										
										SymbolTableIF childSTable = childScope.getSymbolTable();
										TypeTableIF childTTable = childScope.getTypeTable();
										semanticErrorManager.semanticDebug("childTTable=" + childTTable.toString());
										semanticErrorManager.semanticDebug("parentTable=" + childTTable.getScope().getParentScope().getTypeTable().toString());
										
										
										//TO-DO : Esto no sería necesario, ya que podemos buscar los tipos simples en todos los ámbitos
										
										//Insertar todos los TypeSimple(Integer, Boolean) en la Tabla de Tipos de la Función
										//childTTable.addType("BOOLEAN", new TypeSimple(childScope, "Boolean"));
										//childTTable.addType("INTEGER", new TypeSimple(childScope, "Integer")); 
										
										//semanticErrorManager.semanticDebug("childTTable=" + childTTable.toString());
										//semanticErrorManager.semanticDebug("parentTable=" + childTTable.getScope().getParentScope().getTypeTable().toString());
									}
									else
										semanticErrorManager.semanticFatalError("ERROR FUNC001: Función " + id.getLexema() + " ya definida");																			 
								:}  
								LEFTBRACKET parametrosFormales:paramFormales RIGHTBRACKET RETURN tipoPrimitivo:tp 
								{:	
										//Obtenemos TT y TS del scope Padre
										ScopeIF parentScope = scopeManager.getParentScope();
										SymbolTableIF parentSTable = parentScope.getSymbolTable();
										TypeTableIF parentTTable = parentScope.getTypeTable();								
									
										//Añadimos TypeFunction a TT y TS del scope Padre
										//semanticErrorManager.semanticDebug("ParentScope=" + parentScope.getName() + "(Level=" + parentScope.getLevel() + "),Id=" + parentScope.getId());
										TypeFunction typeFunction = new TypeFunction(parentScope, id.getLexema(), paramFormales.getListaTiposParametros());
										SymbolFunction symbolFunction = new SymbolFunction(parentScope, id.getLexema() , typeFunction, paramFormales.getListaParametros());
										parentTTable.addType(id.getLexema(), typeFunction);
										parentSTable.addSymbol(id.getLexema(), symbolFunction);
									
										for (SymbolParameter p : paramFormales.getListaParametros())
										{	//Añadimos los parámetros de la función al ámbito de la función
											SymbolTableIF scopeFunctionSTable = scopeManager.getCurrentScope().getSymbolTable();
											semanticErrorManager.semanticDebug("scopeFunctionSTable=" + scopeFunctionSTable.toString());
											scopeFunctionSTable.addSymbol(p.getName(), p);
										
											TypeTableIF scopeFunctionTTable = scopeManager.getCurrentScope().getTypeTable();
											semanticErrorManager.semanticDebug("scopeFunctionTTable=" + scopeFunctionTTable.toString());
																		
											semanticErrorManager.semanticDebug("-------------------------------");
											semanticErrorManager.semanticDebug("p.getType().getName()=" + p.getType().getName());
											
											semanticErrorManager.semanticDebug("Añadiendo a la TT hija:[" + p.getName() + "] - Tipo="  + p.getType());
											if(!scopeManager.containsType(p.getType().getName()))
												//Si el tipo no existe en ninguno de los ámbitos, lo guardamos en la tabla de tipos del ámbito actual (funcion) 
											{	
												scopeFunctionTTable.addType(p.getName(), p.getType());
												semanticErrorManager.semanticDebug("Añadiendo a la TT hija: " + p.getName() + p.getType());
											}
										

											//childSTable.addSymbol(p.getName(), p);
											////typeFunction.addParameterType(p.getType());
											//typeFunction.addParameter(p);
										}
										
										//Establecemos el tipo declarado que retornará la función
										typeFunction.setReturnType(tp.getType());
									
								:} IS seccionTipos
								{:
									//Aquí se deriva seccionTipos->secionVariables->seccionSubprogramas->seccionCuerpoPrograma de la misma forma
									//que el programa global.
									// SeccionCuerpoPrograma-> BEGIN bloqueSentencias END IDENTIFIER SEMICOLON
									// Por tanto en "ESTE" bloqueSentencias (el correspondiente a la función) debemos realizar las siguientes 
									//Verificaciones semánticas:
									//		Debe existir la sentencia Return
									//		Tipo de la sentencia Return debe ser del tipo de retorno declarado
									
									//Cerramos el ámbito de la función
									scopeManager.closeScope();
								:}
//								| FUNCTION IDENTIFIER LEFTBRACKET parametrosFormales RIGHTBRACKET RETURN error IS {:syntaxErrorManager.syntaxInfo("ERROR 00x: Error definición función, falta tipo de Return");:}
								| PROCEDURE IDENTIFIER:id
								{:
									semanticErrorManager.semanticDebug("Declaración Procedimiento: PROCEDURE " + id.getLexema());
									if(!(scopeManager.containsSymbol(id.getLexema()) && scopeManager.containsType(id.getLexema()) ))
									{								
										//Creamos nuevo ámbito
										ScopeIF childScope = scopeManager.openScope(id.getLexema());
										//semanticErrorManager.semanticDebug("CHILDScope=" + childScope.getName() + "(Level=" + childScope.getLevel() + "),Id=" + childScope.getId());										
										SymbolTableIF childSTable = childScope.getSymbolTable();
										TypeTableIF childTTable = childScope.getTypeTable();
										semanticErrorManager.semanticDebug("childTTable=" + childTTable.toString());
										semanticErrorManager.semanticDebug("parentTable=" + childTTable.getScope().getParentScope().getTypeTable().toString());
									}
									else
										semanticErrorManager.semanticFatalError("ERROR PROC001: Procedimiento " + id.getLexema() + " ya definido");																			 
								:}  								
								LEFTBRACKET parametrosFormales:paramFormales RIGHTBRACKET 
								{:	
									//Obtenemos TT y TS del scope Padre
									ScopeIF parentScope = scopeManager.getParentScope();
									SymbolTableIF parentSTable = parentScope.getSymbolTable();
									TypeTableIF parentTTable = parentScope.getTypeTable();								
								
									//Añadimos TypeProcedure a TT y TS del scope Padre
									//semanticErrorManager.semanticDebug("ParentScope=" + parentScope.getName() + "(Level=" + parentScope.getLevel() + "),Id=" + parentScope.getId());
									TypeProcedure typeProcedure = new TypeProcedure(parentScope, id.getLexema(), paramFormales.getListaTiposParametros());
									SymbolProcedure symbolProcedure = new SymbolProcedure(parentScope, id.getLexema() , typeProcedure);
									parentTTable.addType(id.getLexema(), typeProcedure);
									parentSTable.addSymbol(id.getLexema(), symbolProcedure);
								
									for (SymbolParameter p : paramFormales.getListaParametros())
									{	//Añadimos los parámetros del procedimiento al ámbito del procedimiento
										SymbolTableIF scopeProcSTable = scopeManager.getCurrentScope().getSymbolTable();
										semanticErrorManager.semanticDebug("scopeProcSTable=" + scopeProcSTable.toString());
										scopeProcSTable.addSymbol(p.getName(), p);
									
										TypeTableIF scopeProcTTable = scopeManager.getCurrentScope().getTypeTable();
										semanticErrorManager.semanticDebug("scopeProcTTable=" + scopeProcTTable.toString());
																	
										semanticErrorManager.semanticDebug("-------------------------------");
										semanticErrorManager.semanticDebug("p.getType().getName()=" + p.getType().getName());
										
										semanticErrorManager.semanticDebug("Añadiendo a la TT hija:[" + p.getName() + "] - Tipo="  + p.getType());
										if(!scopeManager.containsType(p.getType().getName()))
											//Si el tipo no existe en ninguno de los ámbitos, lo guardamos en la tabla de tipos del ámbito actual (procedure) 
										{	
											scopeProcTTable.addType(p.getName(), p.getType());
											semanticErrorManager.semanticDebug("Añadiendo a la TT hija: " + p.getName() + p.getType());
										}
									}
									
									// TO-DO: Procedure no tiene tipo de retorno
									// Aun así, quizá convenga establecer valor bandera, para no comprobar en bloqueListaSentencias que tiene Return;
									//Establecemos el tipo declarado que retornará la función
									//typeFunction.setReturnType(tp.getType());
								:}
								IS seccionTipos
								{:
									//Cerramos el ámbito de la función
									scopeManager.closeScope();
								:};								 
								



//parametrosFormales		::= parametrosFormales SEMICOLON listaIdentificadores COLON tipoPrimitivo
//								| listaIdentificadores COLON tipoPrimitivo
//								| empty;

parametrosFormales			::= listaParametrosFormales:lParamForm
								{:
									ArrayList<SymbolParameter> listaParametros = lParamForm.getParameters();
									//semanticErrorManager.semanticDebug("Nº Parámetros en listaParametrosFormales=" + listaParametros.size());
									//semanticErrorManager.semanticDebug("ParametrosFormales.toString=" + lParamForm.toString());
									for(int i = 0; i < listaParametros.size(); i++)
									{	//Imprimimos los parámetros
										//semanticErrorManager.semanticDebug("ListaParametros(i).toString() = " + listaParametros.get(i).toString());
									}
									RESULT = new ParametrosFormales(listaParametros);
								:}
								| empty
								{:
									RESULT = new ParametrosFormales(); 
								:};

listaParametrosFormales		::= listaParametrosFormales:lParamForm SEMICOLON listaIdentificadores:idlist COLON tipoPrimitivo:tp
								{:
									
									//Creamos una lista de SymbolParameter, que contrendrá todos los parámetros
									ArrayList<SymbolParameter> lSymbolParam = new ArrayList<SymbolParameter>();									
									//Creamos un SymbolParameter para cada uno de los identificadores de tipo tp en la lista idlist,
									
									for(int i=0; i<idlist.getSize(); i++)
									{
										
										String name = idlist.getIdentifiersListItem(i);
										SymbolParameter symbolParam = new SymbolParameter(scopeManager.getCurrentScope(), name, tp.getType());
										semanticErrorManager.semanticDebug("Creando SymbolParameter=" + name + ", con Scope:" + scopeManager.getCurrentScope()); 
										semanticErrorManager.semanticDebug("SymbolParameter.toString" + symbolParam.toString());
										//Añadimos los SymbolParameters a la lista de SymbolParameter
										lSymbolParam.add(symbolParam);										
									}
									lParamForm.addAllParameters(lSymbolParam);
									semanticErrorManager.semanticDebug("idlisttoStringOverride=" + idlist.toString());																		
									RESULT =  lParamForm;
								:}
								| listaIdentificadores:idlist COLON tipoPrimitivo:tp
								{:
									
									//Creamos una lista de SymbolParameter, que contrendrá todos los parámetros
									ArrayList<SymbolParameter> lSymbolParam = new ArrayList<SymbolParameter>();								 									
									for(int i = 0; i < idlist.getSize(); i++)
									{
										String name = idlist.getIdentifiersListItem(i);																	
										SymbolParameter symbolParam = new SymbolParameter(scopeManager.getCurrentScope(), name, tp.getType());
										semanticErrorManager.semanticDebug("Creando SymbolParameter=" + name + ", con Scope:" + scopeManager.getCurrentScope());
										semanticErrorManager.semanticDebug("SymbolParameter.toString" + symbolParam.toString());										
										//Añadimos los SymbolParameters a la lista de SymbolParameter
										lSymbolParam.add(symbolParam);
									}
									ListaParametrosFormales lParamForm = new ListaParametrosFormales(lSymbolParam);																			
									RESULT =  lParamForm;
								:};
								
								 
 
//listaParametrosFormales		::= listaparametrosFormales SEMICOLON declaracionParametrosFormales
//								| declaracionParametrosFormales;
//declaracionParametrosFormales	::= listaIdentificadores COLON tipoPrimitivo;
									
								
								

// Bloque de sentencias
bloqueSentencias	::= sentencia:sent SEMICOLON bloqueSentencias:bloqueSent
						{:
							//semanticErrorManager.semanticDebug("En bloqueSentencias -> sentencia; bloqueSentencias");
							//semanticErrorManager.semanticDebug("SCOPE ACTUAL=" + scopeManager.getCurrentScope().getName());
							
							//Verificaciones semánticas de tipo RETURN en Función
							//Para ver si tenemos que realizar estas verificaciones o no, comprobamos el nivel del Ámbito
							//Si el nivel es 0, estamos en el ámbito global y no somos función, es decir, no tenemos que verificar que existe Return
							//Si el nivel es 1, estamos en un subprograma, por lo que tenemos que comprobar si existe Return si es una función
							
							ScopeIF scope = scopeManager.getCurrentScope();
							int levelScope = scope.getLevel();
							
							if(levelScope > 0)
							{	//Estamos en el bloqueSentencias de un subprograma
								//semanticErrorManager.semanticDebug("_*_*_*_*_*_*_*Scope actual: " + scope.getId() + ", " + scope.getName());
								//El nombre del scope nos da el subprograma de este bloque de sentencias
								//Obtenemos el símbolo del scope
								SymbolIF symbol = scopeManager.searchSymbol(scope.getName());
								//semanticErrorManager.semanticDebug("_**_**_*_** symbol" + symbol.toString());
								
								if (symbol instanceof SymbolFunction)
								{	//Si es una función tenemos que verificar si tiene return 
//									semanticErrorManager.semanticDebug("Soy una función");
//									semanticErrorManager.semanticDebug("Tipo:" + symbol.getType() + ", name=" + symbol.getName());
									SymbolFunction symFunc = (SymbolFunction)scopeManager.searchSymbol(symbol.getName());
									//Verificación de sentenciaReturn, para funciones (Se comprobará en seccionCuerpoPrograma)							
									if (sent instanceof SentenciaReturn)
									{
										bloqueSent.setExisteReturn(true);
									}							
								} 						
							}
							
							
							//Generación de Código Intermedio		
							IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
							codeBuilder.addQuadruples(sent.getIntermediateCode());
							codeBuilder.addQuadruples(bloqueSent.getIntermediateCode());
							
							List intermediateCode = codeBuilder.create();		
							bloqueSent.setIntermediateCode(intermediateCode);			
							//bloqueSent.setIntermediateCode(intermediateCode);					
							semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI - BLOQUE SENTENCIAS=" + bloqueSent.getIntermediateCode());
							RESULT = bloqueSent; 
							
						:} 
						| empty 
						{: 	//semanticErrorManager.semanticDebug("En bloqueSentencias -> empty");						
							BloqueSentencias bloqueSent = new BloqueSentencias();					
							RESULT = bloqueSent; 
						:};								

sentencia		::= 
//					expresion
//						{: //semanticErrorManager.semanticDebug("Sentencia -> Expresion"); :}  
//					|
					 sentenciaAsignacion:sentAsig 
						{: //semanticErrorManager.semanticDebug("Sentencia->SentenciaAsignación"); 
							//semanticErrorManager.semanticDebug("Sentencia->SentenciaAsignación= " + sentAsig.getName());
							RESULT = sentAsig;
						:}   
					| sentenciaIf:sentIf 
						{: 	//semanticErrorManager.semanticDebug("Sentencia -> SentenciaIF");
							RESULT = sentIf;
						:}  
					| {: 
						//semanticErrorManager.semanticDebug("Sentencia -> sentenciaIO"); 
					  :} sentenciaIO:sentIO
						{: 
						RESULT =  sentIO; 
						:}
					| sentenciaReturn:sentRet
						{: 	//semanticErrorManager.semanticDebug("Sentencia -> SentenciaReturn");
							RESULT = sentRet; 
						:}  
					| sentenciaFor:sentFor
						{: //semanticErrorManager.semanticDebug("Sentencia -> SentenciaFor");
							RESULT = sentFor;
						:}
					| llamadaSubprograma:llamadaSubProg
					{:
						//semanticErrorManager.semanticDebug("Sentencia -> llamadaSubProg");
						RESULT = new Sentencia(llamadaSubProg);
					:};


// Expresiones
expresion	::= expresionAritmetica:exprarit
				{:
					//semanticErrorManager.semanticDebug("en Expresion -> ExpresionAritmetica: ");
					//semanticErrorManager.semanticDebug("Exp->ExpArit... " + exprarit.getValue());
					semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI - exp->exprArit = " + exprarit.getIntermediateCode());
					//semanticErrorManager.semanticDebug("?????  - en Expresion->ExprArit, el temporal de expresion es=" + exprarit.getTemporal());
														
					RESULT = exprarit;
				:}
				|expresionLogica:exprlog 
				{:
					//semanticErrorManager.semanticDebug("en Expresion -> ExpresionLogica");
					RESULT = exprlog;
				:}  
				| LEFTBRACKET expresion:expr RIGHTBRACKET
				{:
					//semanticErrorManager.semanticDebug("en Expresion -> (expresion) ");
					RESULT = expr;
				:}				 
				| llamadaSubprograma:llamadaSubProg
				{:
					//semanticErrorManager.semanticDebug("en Expresion -> llamadaSubProg");
					RESULT = new Expresion(llamadaSubProg);
				:}
				| referencia:ref
				{:
					ScopeIF scope = scopeManager.getCurrentScope();
					Util util = new Util();
					//Verificamos si la referencia está ya definida en la Tabla de Símbolos 
					if(!util.checkSymbolTableScope(scope, ref.getName())){
							semanticErrorManager.semanticFatalError("ERROR REF001: No existe la declaración de " + ref.getName());
					}
					else{
						TypeIF typeref = ref.getType();
						Expresion expr = new Expresion(typeref);
						
//						//Generación de Código Intermedio
//						TemporalFactoryIF tempFactory = new TemporalFactory(scope);
//						IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);										
//						TemporalIF eTemp = tempFactory.create();
//						TemporalIF refTemp = ref.getTemporal();
//						codeBuilder.addQuadruples(ref.getIntermediateCode());
//						codeBuilder.addQuadruple("MV", eTemp, refTemp);						
//						expr.setTemporal(eTemp);
//						List intermediateCode = codeBuilder.create();
//						expr.setIntermediateCode(intermediateCode);

						//semanticErrorManager.semanticDebug("?????  - en expresion->referencia, el temporal de referencia es=" + ref.getTemporal());						 
						expr.setTemporal(ref.getTemporal());
						//semanticErrorManager.semanticDebug("?????  - en expresion->referencia, el temporal de expresion es=" + ref.getTemporal()); 
						expr.setIntermediateCode(ref.getIntermediateCode());
						semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI - expr->referencia= " + expr.getIntermediateCode()); 
						RESULT = expr;						
					}
				:}
				| error SEMICOLON 
				{:
					syntaxErrorManager.syntaxInfo("Error sintáctico en Expresión");
				:};

expresionAritmetica ::= expresion:e1 PLUS expresion:e2
						{:
							//semanticErrorManager.semanticDebug("En ExpresionAritmetica -> Expresion + Expresion");
								
//								//Comprobación de tipos sobre e1 y e2
//								TypeIF e1type = scopeManager.searchType("Integer");
//								TypeIF e2type = scopeManager.searchType("Integer");
//								semanticErrorManager.semanticDebug("Expresión Aritmética - Tipo de e1: " + e1type.getName());
//								semanticErrorManager.semanticDebug("Expresión Aritmética - Tipo de e2: " + e2type.getName());
//								if (e1type == e2type)
//								{
//									semanticErrorManager.semanticDebug("Expresión Aritmética - Tipos compatibles" );							
//								}
//								else semanticErrorManager.semanticFatalError ("Expresión Aritmética - Tipos incompatibles");

								ExpresionAritmetica exprarit = new ExpresionAritmetica(e1, e2, new TypeSimple(scopeManager.getCurrentScope(), "Integer"));
								
								//Generación de Código Intermedio
								ScopeIF scope = scopeManager.getCurrentScope();
								TemporalFactoryIF tempFactory = new TemporalFactory(scope);
								TemporalIF eTemp = tempFactory.create();
								TemporalIF e1Temp = e1.getTemporal();
								TemporalIF e2Temp = e2.getTemporal();
								IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
								codeBuilder.addQuadruples(e1.getIntermediateCode());
								codeBuilder.addQuadruples(e2.getIntermediateCode());
								codeBuilder.addQuadruple("ADD", eTemp, e1Temp, e2Temp);
								exprarit.setTemporal(eTemp);
								List intermediateCode = codeBuilder.create();
								exprarit.setIntermediateCode(intermediateCode);
								
								RESULT = exprarit;																
								 
						:} 
						| NUMBER:num
						{:
							//semanticErrorManager.semanticDebug("En ExpresionAritmetica -> NUMBER");
							Integer value = Integer.parseInt(num.getLexema());
							ExpresionAritmetica exprarit = new ExpresionAritmetica(new TypeSimple(scopeManager.getCurrentScope(),"Integer"), value);
							//semanticErrorManager.semanticDebug("ExpresionAritmetica->NUMBER. ExpresionAritmetica = " + exprarit.getValue());
							
							//Generación de Código Intermedio
							ScopeIF scope = scopeManager.getCurrentScope();
							TemporalFactoryIF tempFactory = new TemporalFactory(scope);
							IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
							
							TemporalIF eTemp = tempFactory.create();
							codeBuilder.addQuadruple("MV", eTemp, new Value(value));
						
							exprarit.setTemporal(eTemp);
							//semanticErrorManager.semanticDebug("?????  - en Expresion=Number, el temporal de Exprarit es=" + exprarit.getTemporal());
							List intermediateCode = codeBuilder.create();
							exprarit.setIntermediateCode(intermediateCode);
								
							semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI - expArit->num = " + exprarit.getIntermediateCode());								
							RESULT = exprarit;
						:}; 

expresionLogica		::= expresion:e1 OR expresion:e2
							{:
								//semanticErrorManager.semanticDebug("En ExpresionLogica -> exp OR exp");
								ExpresionLogica exprlog = new ExpresionLogica(e1, e2, new TypeSimple(scopeManager.getCurrentScope(), "Boolean"));
								//Comprobación de tipos sobre e1 y e2
												

								//Generación de Código Intermedio para e1 OR e2
								ScopeIF scope = scopeManager.getCurrentScope();
								TemporalFactoryIF tempFactory = new TemporalFactory(scope);
								TemporalIF eTemp = tempFactory.create();
								TemporalIF e1Temp = e1.getTemporal();
								TemporalIF e2Temp = e2.getTemporal();
								IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
								codeBuilder.addQuadruples(e1.getIntermediateCode());
								codeBuilder.addQuadruples(e2.getIntermediateCode());
								//codeBuilder.addQuadruple("OR", eTemp, e1Temp, e2Temp);
							
								//Generamos dos Valores para True y False
								Value valueFalse = new Value(0);
								Value valueTrue  = new Value(1);
								//Construimos dos etiquetas para procesar True y False, una etiqueta saltará a True y otra para saltar al Final del procesamiento
								LabelFactory labelFact = new LabelFactory("string");
								LabelIF labelTrue = labelFact.create();
								LabelIF labelSalida = labelFact.create();
								
								codeBuilder.addQuadruple("CMP", e1Temp, valueTrue);
								codeBuilder.addQuadruple("BZ" , labelTrue);
								codeBuilder.addQuadruple("CMP", e2Temp, valueTrue);
								codeBuilder.addQuadruple("BZ", labelTrue);
								codeBuilder.addQuadruple("ASSIGN", eTemp, valueFalse);
								codeBuilder.addQuadruple("BR", labelSalida);
								codeBuilder.addQuadruple("LABEL", labelTrue);
								codeBuilder.addQuadruple("ASSIGN", eTemp, valueTrue);
								codeBuilder.addQuadruple("LABEL", labelSalida);
							
							
								exprlog.setTemporal(eTemp);
								List intermediateCode = codeBuilder.create();
								exprlog.setIntermediateCode(intermediateCode);
								
								RESULT = exprlog;		
							:} 
						| expresion:e1 GREATTHAN expresion:e2
							{:
								//semanticErrorManager.semanticDebug("En ExpresionLogica -> exp > exp");
								ExpresionLogica exprlog = new ExpresionLogica(e1, e2, new TypeSimple(scopeManager.getCurrentScope(), "Boolean") );
								//Comprobación de tipos sobre e1 y e2
								
								
								//Generación de Código Intermedio para e1 > e2
								ScopeIF scope = scopeManager.getCurrentScope();
								TemporalFactoryIF tempFactory = new TemporalFactory(scope);
								TemporalIF eTemp = tempFactory.create();
								TemporalIF e1Temp = e1.getTemporal();
								TemporalIF e2Temp = e2.getTemporal();
								IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
								codeBuilder.addQuadruples(e1.getIntermediateCode());
								codeBuilder.addQuadruples(e2.getIntermediateCode());
								//codeBuilder.addQuadruple("GRT", eTemp, e1Temp, e2Temp);
								
								//Generamos dos Valores para True y False
								Value valueFalse = new Value(0);
								Value valueTrue  = new Value(1);
								//Construimos dos etiquetas para procesar True y False, una etiqueta saltará a True y otra para saltar al Final del procesamiento
								LabelFactory labelFact = new LabelFactory("expr_gt");
								LabelIF labelTrue = labelFact.create();
								LabelIF labelSalida = labelFact.create();
								
								codeBuilder.addQuadruple("CMP", e1Temp, e2Temp);
								codeBuilder.addQuadruple("BP" , labelTrue);
								codeBuilder.addQuadruple("ASSIGN", eTemp, valueFalse);
								codeBuilder.addQuadruple("BR", labelSalida);
								codeBuilder.addQuadruple("LABEL", labelTrue);
								codeBuilder.addQuadruple("ASSIGN", eTemp, valueTrue);
								codeBuilder.addQuadruple("LABEL", labelSalida);

																
								exprlog.setTemporal(eTemp);
								List intermediateCode = codeBuilder.create();
								exprlog.setIntermediateCode(intermediateCode);
								
								RESULT = exprlog;	
							:}
						| expresion:e1 EQUAL expresion:e2
							{:
								//semanticErrorManager.semanticDebug("En ExpresionLogica -> exp = exp");
								ExpresionLogica exprlog = new ExpresionLogica(e1, e2, new TypeSimple(scopeManager.getCurrentScope(), "Boolean"));
								//Comprobación de tipos sobre e1 y e2
								
								//Generación de Código Intermedio para e1 > e2
								ScopeIF scope = scopeManager.getCurrentScope();
								TemporalFactoryIF tempFactory = new TemporalFactory(scope);
								TemporalIF eTemp = tempFactory.create();
								TemporalIF e1Temp = e1.getTemporal();
								TemporalIF e2Temp = e2.getTemporal();
								IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
								codeBuilder.addQuadruples(e1.getIntermediateCode());
								codeBuilder.addQuadruples(e2.getIntermediateCode());

								//Generamos dos Valores para True y False
								Value valueFalse = new Value(0);
								Value valueTrue  = new Value(1);
								//Construimos dos etiquetas para procesar True y False, una etiqueta saltará a True y otra para saltar al Final del procesamiento
								LabelFactory labelFact = new LabelFactory("string");
								LabelIF labelTrue   = labelFact.create();
								LabelIF labelSalida = labelFact.create();

										//codeBuilder.addQuadruple("EQ", eTemp, e1Temp, e2Temp);
								codeBuilder.addQuadruple("CMP", e1Temp, e2Temp);
								codeBuilder.addQuadruple("BZ", labelTrue);
								codeBuilder.addQuadruple("ASSIGN", eTemp, valueFalse);
								codeBuilder.addQuadruple("BR", labelSalida);
								codeBuilder.addQuadruple("LABEL", labelTrue);
								codeBuilder.addQuadruple("ASSIGN", eTemp, valueTrue);
								codeBuilder.addQuadruple("LABEL", labelSalida);
								 													
								
								exprlog.setTemporal(eTemp);
								List intermediateCode = codeBuilder.create();
								exprlog.setIntermediateCode(intermediateCode);
																
								RESULT = exprlog;	
							:}
						| TRUE:tr 
						{:
							//semanticErrorManager.semanticDebug("En ExpresionLogica -> TRUE");
							ExpresionLogica exprLog = new ExpresionLogica(new TypeSimple(scopeManager.getCurrentScope(), "BOOLEAN"));
							exprLog.setValue(true);
							//semanticErrorManager.semanticDebug("en ExpresiónLógica -> TRUE");
							
							//Generación de Código Intermedio
							ScopeIF scope = scopeManager.getCurrentScope();
							TemporalFactoryIF tempFactory = new TemporalFactory(scope);
							TemporalIF eTemp = tempFactory.create();
							IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
							//codeBuilder.addQuadruple("MV", eTemp, exprLog.getValue());
							codeBuilder.addQuadruple("MV", eTemp, new Value(1));
							exprLog.setTemporal(eTemp);
							List intermediateCode = codeBuilder.create();
							exprLog.setIntermediateCode(intermediateCode);
							
							RESULT = exprLog;
						:}
						| FALSE
						{:
							//semanticErrorManager.semanticDebug("En ExpresionLogica -> FALSE");
							ExpresionLogica exprLog = new ExpresionLogica(new TypeSimple(scopeManager.getCurrentScope(), "BOOLEAN"));
							exprLog.setValue(false);
							//semanticErrorManager.semanticDebug("en ExpresiónLógica -> FALSE");
							
							//Generación de Código Intermedio
							ScopeIF scope = scopeManager.getCurrentScope();
							TemporalFactoryIF tempFactory = new TemporalFactory(scope);
							TemporalIF eTemp = tempFactory.create();
							IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
							//codeBuilder.addQuadruple("MV", eTemp, exprLog.getValue());
							codeBuilder.addQuadruple("MV", eTemp, new Value(0));
							exprLog.setTemporal(eTemp);
							List intermediateCode = codeBuilder.create();
							exprLog.setIntermediateCode(intermediateCode);
							
							RESULT = exprLog;
						:}
						;
						
referencia			::= referencia:refer POINT IDENTIFIER:id
						{: 
							//semanticErrorManager.semanticDebug("En Referencia-> refer.id");
							String referName = refer.getName();
							String innerName = id.getLexema();
							
							TypeIF referType = refer.getType();	//Tipo de la referencia
							if(referType instanceof TypeRecord)	//Si es de tipo registro continuamos, si no es un tipo Record, mostraremos un error (else)
							{
								//Obtenemos símbolo indicado por la referencia, de la Tabla de Símbolos.
								ScopeIF scope = scopeManager.getCurrentScope();
								SymbolIF simboloReferencia = scopeManager.searchSymbol(referName);
								TypeIF tipoSimbReferencia = scopeManager.searchType(simboloReferencia.getType().getName());
								
								TypeRecord tRec = (TypeRecord) tipoSimbReferencia;
								//semanticErrorManager.semanticDebug("Antes de tRec.containsField");
								//semanticErrorManager.semanticDebug("tRec.getName()=" + tRec.getName());
	

								if(tRec.containsField(innerName)){
									semanticErrorManager.semanticDebug("DEBUG R001 - " + referName + " SI contiene campo " + innerName);
								
									TypeIF innerType = tRec.getTypeField(innerName);
									semanticErrorManager.semanticDebug("DEBUG R001 - El tipo del campo innername=" + innerName + " es = " + innerType);
									//TypeIF innerType = scopeManager.searchType(scopeManager.searchSymbol(innerName).getName());
									
									//Generación de CódigoIntermedio
									Referencia ref = new Referencia(referType, referName);
									semanticErrorManager.semanticDebug("DEBUG R001 - El offset del campo innername=" + innerName + " es = " + tRec.getOffset(innerName));
									ref.setOffset(tRec.getOffset(innerName));	//Establecemos el offset del campo del registro

									
									TemporalFactoryIF tempFactory = new TemporalFactory(scope);
									TemporalIF refTemp = refer.getTemporal();
									TemporalIF refTempIndex = refer.getTemporalIndex();
									TemporalIF refTempOffset = tempFactory.create();
									IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
									codeBuilder.addQuadruples(refer.getIntermediateCode());
									
									TypeRecord rType = (TypeRecord)refer.getType();
									int idOffset	 = rType.getOffset(innerName);
									codeBuilder.addQuadruple("MV", refTempOffset, idOffset);
									ref.setTemporal(refTemp);
									ref.setTemporalIndex(refTempIndex);
									ref.setTemporalOffset(refTempOffset);
									List intermediateCode = codeBuilder.create();
									ref.setIntermediateCode(intermediateCode);
									
									RESULT = ref;
								}
								else {
									semanticErrorManager.semanticDebug("ERROR R001 - " + referName + " NO contiene campo " + innerName);
								}
							}
							else semanticErrorManager.semanticDebug("ERROR R002-" + refer.getName() + " de tipo=" + refer.getType() + " NO es de tipo Registro(RECORD)");
				:} 
				| IDENTIFIER:id
				{:
					String name = id.getLexema();
					//semanticErrorManager.semanticDebug("En Referencia -> ID(" + name + ")");
					
					ScopeIF scope = scopeManager.getCurrentScope();
					Util util = new Util();
					//Verificamos si la referencia está ya definida en la Tabla de Símbolos
					
					if(!util.checkSymbolTableScope(scope, name)){
						semanticErrorManager.semanticFatalError("ERROR REF001: No existe la declaración de " + name + " [Line=" + id.getLine() + ",Col=" + id.getColumn() + "]");
					}
					else{
						//semanticErrorManager.semanticDebug("En Referencia -> ID(" + name + ") - El ID está en la tabla de símbolos");
						//Verificación de tipos
						//Obtenemos tipo del identificador en la tabla de tipos
						SymbolTableIF tablaSimbolos = scope.getSymbolTable(); 
						TypeTableIF tablaTipos = scope.getTypeTable();
						
						//tablaTipos.getType(name);
						SymbolIF refsymbol = tablaSimbolos.getSymbol(name);	//Obtenemos símbolo del nombre (de la Tabla de Símbolos)
						TypeIF typeref = refsymbol.getType();
						
						Referencia ref = new Referencia (typeref, name);
						ref.setIndex(1);
														
						//Generación de Código Intermedio
						TemporalFactoryIF tempFactory = new TemporalFactory(scope);
						IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
						TemporalIF refTemp = tempFactory.create();
						//semanticErrorManager.semanticDebug("?????  - en Referencia->id , el temporal de Referencia es=" + refTemp);						
						SymbolIF symbol = scopeManager.searchSymbol(name);
						//semanticErrorManager.semanticDebug("SIMBOLO=" + symbol.toString());
						
						// El identificador de la Referencia podria ser una Variable, o bien una Constante, o un parametro de un subprograma
						
						if(symbol instanceof SymbolVariable){
							//El símbolo de la referencia es de tipo SymbolVariable
							Variable var = new Variable(name, symbol);
							codeBuilder.addQuadruple("MV", refTemp, var);
						}
						else if (symbol instanceof SymbolConstant){
							//El símbolo de la referencia es de tipo SymbolConstant
							SymbolConstant symbolConst = (SymbolConstant)symbol;
							Value constValue = new Value(symbolConst.getValue());

							codeBuilder.addQuadruple("MV", refTemp, constValue);
						}
						
						ref.setTemporal(refTemp);
						List intermediateCode = codeBuilder.create();
						ref.setIntermediateCode(intermediateCode);					 
									
									
						semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI - REF->ID = " + ref.getIntermediateCode());									
						RESULT = ref;
					}							
					
				:};  
	
 
// Sentencia IO
sentenciaIO 	::= PUTLINE LEFTBRACKET 
					{:
						semanticErrorManager.semanticDebug(" sentenciaIO=PutLine(expresion)" );
					:} expresion:expr RIGHTBRACKET
					{:
						SentenciaIO sentenciaIO = new SentenciaIO();
						
						//Generación de Código Intermedio
						IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
						TemporalIF temporalExpr = expr.getTemporal();				
						codeBuilder.addQuadruples(expr.getIntermediateCode());
						//Traducimos a código intermedio de forma distinta si la expresión es de tipo booleano o no
						semanticErrorManager.semanticDebug("Tipo de la expresion=============" + expr.getType());
						semanticErrorManager.semanticDebug("Tipo de la expresion=============" + expr.getType().getName());
						

						
						if (expr.getType() instanceof TypeSimple)
						{	//Si la expresión es de tipo simple
						semanticErrorManager.semanticDebug("Expresion en Put_line(expresion) es de Tipo Simple");
							if (expr.getType().getName().equals("BOOLEAN")){	//La expresión es de tipo booleano
								//Generamos cuádruplas para escribir bien el valor "true" o el valor "false"
								semanticErrorManager.semanticDebug("Expresion en Put_line(expresion) es de Tipo BOOLEANO");
								//codeBuilder.addQuadruple("WRITELN",  temporalExpr);
								LabelFactoryIF labelFact = new LabelFactory ("string");
	        					LabelIF labelTrue    = labelFact.create ();
	        					LabelIF labelSalida  = labelFact.create ();
								
								//Generamos dos Valores para True y False
								Value valueFalse = new Value("False");
								Value valueTrue  = new Value("True");
								
								codeBuilder.addQuadruple("BP", temporalExpr, labelTrue);
								codeBuilder.addQuadruple("WRITELN", valueFalse);
								codeBuilder.addQuadruple("BR", labelSalida);
								codeBuilder.addQuadruple("LABEL", labelTrue);
								codeBuilder.addQuadruple("WRITELN", valueTrue);
								codeBuilder.addQuadruple("LABEL", labelSalida);   
							}
							else{
								semanticErrorManager.semanticDebug("Expresion en Put_line(expresion) es de Tipo Simple, pero no boolean");
								semanticErrorManager.semanticDebug("Tipo de la expresion=============" + expr.getType());
								semanticErrorManager.semanticDebug("Tipo de la expresion=============" + expr.getType().getName());		
								codeBuilder.addQuadruple("WRITEEXP", temporalExpr);		
							}
						}
						
													
						
						List intermediateCode = codeBuilder.create();
						sentenciaIO.setIntermediateCode(intermediateCode);
						semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI - PUTLINE(expresion)" + sentenciaIO.getIntermediateCode());						
						RESULT = sentenciaIO;
					:}
					| PUTLINE LEFTBRACKET STRING:str RIGHTBRACKET
					{:
						//semanticErrorManager.semanticDebug(" sentenciaIO=PutLine(String)" );
						SentenciaIO sentenciaIO = new SentenciaIO();
						//Generación de Código Intermedio 
						
						//Generación de Código Intermedio
						ScopeIF scope = scopeManager.getCurrentScope();
						IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
						String s = str.getLexema();
						s = s.substring(1, s.length()-1);
						Value val = new Value(s + "\\n");
						semanticErrorManager.semanticDebug("/////////////////////////////" + val.toString());
						
						//codeBuilder.addQuadruple("WRITELN", str.getLexema());
						codeBuilder.addQuadruple("WRITELN", val);
						List intermediateCode = codeBuilder.create();
						sentenciaIO.setIntermediateCode(intermediateCode); 
						semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI - PUTLINE(String)" + sentenciaIO.getIntermediateCode());						
						RESULT = sentenciaIO;
					:};
//					| error {:syntaxErrorManager.syntaxFatalError("ERROR S001: Error en sentencia Put_line"); :};


//Sentencia Asignacion
sentenciaAsignacion		::= referencia:ref ASSIGN expresion:exp
							{:
								semanticErrorManager.semanticDebug ("sentenciaAsignacion -> Id := expresion (" + ref.getName() + ":=" + exp.getValue() + ")");

//								else{
//									//Comprobación de tipos.
//									SymbolIF symbol = scopeManager.searchSymbol(id.getLexema());
//									TypeIF idtype = symbol.getType();
//									semanticErrorManager.semanticDebug("El tipo de la variable: " + id.getLexema() + " es: " + idtype.getName());
//									//TypeIF exptype = exp.getType();
//								}
								
								//Verificación de tipos
								//TypeIF reftype = ref.getType();
								//TypeIF exptype = ref.getType();
								
								//Si la referencia es una llamada a función (es decir, es de tipo Función o Procedure
								// TO-DO: Cuando llegue a Subprogramas
								//if (reftype instanceof TypeFunction || reftype instanceof TypeProcedure){
								//}
								//
								
								//Simbolo
								SymbolIF symbol = scopeManager.searchSymbol(ref.getName());
								TypeIF typeSymbol = symbol.getType();
								if (symbol instanceof SymbolVariable){
									
									//Generación de CódigoIntermedio								
									//Creación de objeto SentenciaAsignacion
									SentenciaAsignacion asignacion = new SentenciaAsignacion(ref.getName() + ":=" + exp.getValue());
									SymbolVariable symvar = (SymbolVariable) scopeManager.searchSymbol(ref.getName());
									symvar.setValue(exp.getValue());
									
									ScopeIF scope = scopeManager.getCurrentScope();
									TemporalFactoryIF tempFactory = new TemporalFactory(scope);
									
									//TemporalIF sentAsigTemp = tempFactory.create();
									//semanticErrorManager.semanticDebug ("????En sentenciaAsignación, su temporal es= " + sentAsigTemp);
									TemporalIF expTemp = exp.getTemporal();
									//TemporalIF rTemp = ref.getTemporal();
									
									TemporalIF rTempIndex = ref.getTemporalIndex();
									//TemporalIF rTempOffset = ref.getTemporalOffset();
									
									IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scope);
									codeBuilder.addQuadruples(exp.getIntermediateCode());
									//codeBuilder.addQuadruples(ref.getIntermediateCode());
									
									Variable var = new Variable(ref.getName(), scopeManager.getCurrentScope(), symbol);								
									codeBuilder.addQuadruple("ASSIGN", var, expTemp);
									 
									List intermediateCode = codeBuilder.create();
									asignacion.setIntermediateCode(intermediateCode);
									semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI - ASIGNACIÓN->ref := exp" + asignacion.getIntermediateCode());									
								RESULT = asignacion;	
								}
							:};
							
						
//Sentencia If
sentenciaIf			::= IF expresion:exp THEN bloqueSentencias:blqsent END IF 
						{:
							semanticErrorManager.semanticDebug("En sentenciaIf -> IF exp THEN bloquesentencias END IF");
							//Obtenemos el tipo de la expresion, que deberá ser de tipo lógico
							semanticErrorManager.semanticDebug("Tipo de la expresion del IF: " + exp.getType());
							if(exp.getType() instanceof TypeSimple){
								semanticErrorManager.semanticDebug("La expresion del IF es instanceof TypeSimple");
								if(exp.getType().getName().equalsIgnoreCase("BOOLEAN"))
								{
									semanticErrorManager.semanticDebug("La expresion del IF es de tipo Booleano");
									SentenciaIf sentenciaIf = new SentenciaIf();
									//Generación de código Intermedio sentenciaIF
									LabelFactory labelFact = new LabelFactory("if");
									LabelIF labelSalida = labelFact.create();
									TemporalIF expTemp 	   = exp.getTemporal();
									
									IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
									codeBuilder.addQuadruples(exp.getIntermediateCode());
									codeBuilder.addQuadruple("CMP", expTemp, new Value(1));		//Comparamos la expresión del if con el valor 1 (true)
									codeBuilder.addQuadruple("BNZ", labelSalida);
									codeBuilder.addQuadruples(blqsent.getIntermediateCode()); 
									codeBuilder.addQuadruple("LABEL", labelSalida);
									codeBuilder.addQuadruple("NOP", null);
									
									
									List intermediateCode = codeBuilder.create();
									sentenciaIf.setIntermediateCode(intermediateCode);
									semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI - IF exp THEN sentencias END IF = " + sentenciaIf.getIntermediateCode());
									
									
									RESULT = sentenciaIf;	
								}
								else
									semanticErrorManager.semanticFatalError("ERROR IF001: La expresión de la sentencia IF no es de tipo Booleano");
							}
							else
								semanticErrorManager.semanticDebug("La expresion del IF ***NO*** es instancia de TypeSimple");
						:}
						| IF expresion:exp THEN bloqueSentencias:blqSentIf ELSE bloqueSentencias:blqSentElse END IF
						{:
							semanticErrorManager.semanticDebug("En sentenciaIf -> IF exp THEN bloquesentencias ELSE bloqueSentencias END IF");
							//Obtenemos el tipo de la expresion, que deberá ser de tipo lógico
							if(exp.getType() instanceof TypeSimple){
								if(exp.getType().getName().equalsIgnoreCase("BOOLEAN"))
								{
									semanticErrorManager.semanticDebug("La expresion del IF es de tipo Booleano");
									SentenciaIf sentenciaIf = new SentenciaIf();
									
									//Generación de código Intermedio sentenciaIF-ELSE
									LabelFactory labelFact = new LabelFactory("ifelse");
									LabelIF labelTrue	= labelFact.create();		
									LabelIF labelFalse = labelFact.create();
									TemporalIF expTemp 	   = exp.getTemporal();
				
									IntermediateCodeBuilderIF codeBuilder = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
									codeBuilder.addQuadruples(exp.getIntermediateCode());
									codeBuilder.addQuadruple("CMP", expTemp, new Value(1));		//Comparamos la expresión del if con el valor 1 (true)
									codeBuilder.addQuadruple("BNZ", labelFalse);
									codeBuilder.addQuadruples(blqSentIf.getIntermediateCode()); 
									codeBuilder.addQuadruple("BR", labelTrue);
									codeBuilder.addQuadruple("LABEL", labelFalse);
									codeBuilder.addQuadruples(blqSentElse.getIntermediateCode());
									codeBuilder.addQuadruple("LABEL", labelTrue);
									//codeBuilder.addQuadruple("NOP", null);
				
				
									List intermediateCode = codeBuilder.create();
									sentenciaIf.setIntermediateCode(intermediateCode);
									semanticErrorManager.semanticDebug("["+ scopeManager.getCurrentScope().getLevel() +"] CI - IF exp THEN sentencias ELSE sentencias END IF = " + sentenciaIf.getIntermediateCode());									
									
									RESULT = sentenciaIf;	
								}
								else
									semanticErrorManager.semanticFatalError("ERROR IF001: La expresión de la sentencia IF no es de tipo Booleano");
							}
							else
								semanticErrorManager.semanticDebug("La expresion del IF ***NO*** es instancia de TypeSimple");							

							
						:};

// Sentencia de retorno de función
sentenciaReturn	::= RETURN expresion
					{:
						semanticErrorManager.semanticDebug("En sentenciaReturn -> RETURN expresion");
						SentenciaReturn sentenciaReturn = new SentenciaReturn();
						RESULT = sentenciaReturn;						
					:};

// Sentencia de llamada a subprograma
llamadaSubprograma		::= IDENTIFIER:id LEFTBRACKET parametrosActuales:paramActuales RIGHTBRACKET
							{:
								semanticErrorManager.semanticDebug("En llamadaSubprograma-> ID (parametrosActuales)");
								String nombreSubprograma = id.getLexema();
								
								//Buscamos si el subprograma ha sido definido (está en la tabla de tipos de algún ámbito)
								if(scopeManager.containsSymbol(nombreSubprograma))
								{
									//Obtenemos el símbolo del subprograma
									SymbolIF symbolSubprograma = scopeManager.searchSymbol(nombreSubprograma);
									TypeIF typeSubprograma = scopeManager.searchType(nombreSubprograma);
									
									//Verificaciones semánticas:
									// 		Parámetros deben coincidir en número, tipo y orden con los definidos en la declaración de la función
									
									if (symbolSubprograma instanceof SymbolFunction)
									{	//El subprograma es una función
										SymbolFunction symFunc = (SymbolFunction) symbolSubprograma;
										TypeFunction typeFunc = (TypeFunction) symFunc.getType();
																					
										//Comprobamos si tienen el mismo número de parámetros
										int aNumParams = paramActuales.getNumParameters();
										int fNumParams = typeFunc.getSize();
										if(!(aNumParams == fNumParams))
											semanticErrorManager.semanticFatalError("ERROR FCALL001: Error en invocación de función '" + nombreSubprograma +"', número de parámetros (" + aNumParams + ") incorrecto, se esperaban " + fNumParams);

										ArrayList<TypeIF> aParams = paramActuales.getParameterTypes();
										ArrayList<TypeIF> fParams = typeFunc.getParameterTypes();
										
										if(typeFunc.comparaTiposParametros(paramActuales))
										{	//Construimos objeto
											TypeIF returnType = typeFunc.getReturnType();
											LlamadaFuncion llamFunc = new LlamadaFuncion(returnType);												
											RESULT = llamFunc;
										
											//if (aParams.equals(fParams))
											//{	//Esto no funciona directamente porque el scope de los TypeSimple de cada lista son distintos. 
											//	semanticErrorManager.semanticDebug("El tipo de los parámetros de invocación a la función, SI coincide con los tipos declarados");										
											//}
											}
										else semanticErrorManager.semanticFatalError("ERROR FCALL002: El tipo de los parámetros de invocación a la función, no coincide con los tipos declarados");											
									}
									else
									{
									 	if (symbolSubprograma instanceof SymbolProcedure) 
										{	//El subprograma es un procedimiento
											SymbolProcedure symProc = (SymbolProcedure) symbolSubprograma;
											TypeProcedure typeProc  = (TypeProcedure) symProc.getType();											
																																																		
											ArrayList<TypeIF> aParams = paramActuales.getParameterTypes();
											ArrayList<TypeIF> pParams = typeProc.getParameterTypes();
																																			
											//Comprobamos si tienen el mismo número de parámetros
											int aNumParams = paramActuales.getNumParameters();
											int pNumParams = typeProc.getSize();
											if(!(aNumParams == pNumParams))
												semanticErrorManager.semanticFatalError("ERROR PCALL001: Error en invocación de procedimiento '" + nombreSubprograma +"', número de parámetros (" + aNumParams + ") incorrecto, se esperaban " + pNumParams); 
											
											if(typeProc.comparaTiposParametros(paramActuales))
											{	//Construimos el objeto LlamadaProcedimiento
												LlamadaProcedimiento llamProc = new LlamadaProcedimiento();
												RESULT = llamProc;
											}
											else semanticErrorManager.semanticFatalError("ERROR FCALL002: El tipo de los parámetros de invocación a la función, no coincide con los tipos declarados");
										}
										else semanticErrorManager.semanticFatalError("ERROR FCALL001: El símbolo del Subprograma:" + nombreSubprograma + 
												" no es de tipo SymbolFunction o SymbolProcedure");
									}
								}
								else
									semanticErrorManager.semanticFatalError("ERROR FCALL001: No se ha definido el subprograma: " + nombreSubprograma); 									
							:};
							
								
								
parametrosActuales				::= parametrosActuales:pActuales COMMA expresion:exp
								{:
									semanticErrorManager.semanticDebug("En parametrosActuales -> parametrosActuales , exp");
									pActuales.addParametroActual(exp);
									RESULT = pActuales;
									
								:} 
								| expresion:exp
								{:
									semanticErrorManager.semanticDebug("En parametrosActuales -> expresion");
									ParametrosActuales paramAct = new ParametrosActuales(exp);
									RESULT = paramAct;
								:}
								| empty;


// Sentencia For
sentenciaFor	::=	FOR IDENTIFIER:id IN expresion:expInicioFor DOUBLEPOINT expresion:expFinFor LOOP bloqueSentencias:blqSentFor END LOOP
					{:
						String indiceFor = id.getLexema();
						semanticErrorManager.semanticDebug("SentenciaFor -> FOR id IN exp :: exp LOOP bloqueSentencias END LOOP");
						semanticErrorManager.semanticDebug("SentenciaFor -> FOR id IN exp :: exp LOOP bloqueSentencias END LOOP");
						// Verificaciones del Indice
						// 		Indice debe estar definido en la tabla de símbolos
						//		Indice debe ser de tipo entero
						if(scopeManager.containsSymbol(indiceFor))
						{
							SymbolIF simboloFor = scopeManager.searchSymbol(indiceFor);					
							TypeIF tiposimboloFor = scopeManager.searchType(simboloFor.getType().getName().toUpperCase());
													
							if(!tiposimboloFor.getName().equalsIgnoreCase("INTEGER"))
								semanticErrorManager.semanticFatalError("ERROR FOR001: El índice: '" + indiceFor + "' de la sentencia FOR no es de tipo Integer");							
							else
							{
								//semanticErrorManager.semanticDebug("El identificador del For es de tipo Entero");
								
								// Verificaciones de Expresiones inicio y Fin del bucle For
								// 		Expresiones deben ser numéricas
								if(expInicioFor.getType() instanceof TypeSimple)
								{
									if(!expInicioFor.getType().getName().equalsIgnoreCase("INTEGER"))
										semanticErrorManager.semanticFatalError("ERROR FOR002: La expresión de inicio de la sentencia FOR no es de tipo Integer");
									else 
									{	
										//semanticErrorManager.semanticDebug("La expresion del Inicio del For es de tipo Integer");
										if(!expFinFor.getType().getName().equalsIgnoreCase("INTEGER"))
											semanticErrorManager.semanticFatalError("ERROR FOR003: La expresión de Fin de la sentencia FOR no es de tipo Integer");
										else{
											//semanticErrorManager.semanticDebug("La expresion del Fin del For es de tipo Integer");
											//Construimos objeto sentenciaFor
											SentenciaFor sentenciaFor = new SentenciaFor();
											RESULT = sentenciaFor;
										}
									}									
								}
								else
									semanticErrorManager.semanticDebug("La expresion de Inicio de la sentencia FOR ***NO*** es instancia de TypeSimple");		
							}	
						}
						else
							semanticErrorManager.semanticFatalError("ERROR FOR004: El índice: '" + indiceFor + "' de la sentencia FOR no ha sido declarado");
					:};

empty ::= ;
