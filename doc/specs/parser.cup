package compiler.syntax;

// Declaración de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.semantic.util.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaración del código de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
		Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}

// Declaración de terminales (Ejemplo)

terminal Token IDENTIFIER;
terminal Token NUMBER;
terminal Token STRING;
//terminal Token AND;		// No implementado: grupo A
//terminal Token ARRAY;		// No implementado: grupo A
terminal Token BEGIN;
terminal Token BOOLEAN;
terminal Token CONSTANT;
terminal Token ELSE;
terminal Token END;
terminal Token FALSE;
terminal Token FOR;
terminal Token FUNCTION;
terminal Token IF;
terminal Token IN;
terminal Token INTEGER;
terminal Token IS;
terminal Token LOOP;
//terminal Token OF;		// No implementado: grupo A
terminal Token OR;
//terminal Token OUT;		// No implementado: grupo A
terminal Token PROCEDURE;
terminal Token PUTLINE;
terminal Token RECORD;
terminal Token RETURN;
terminal Token THEN;
terminal Token TRUE;
terminal Token TYPE;
//terminal Token WHILE; 	// No implementado: grupo A
 terminal Token BACKSLASH; 
// ?¿?¿?¿?¿?¿?¿? backslash ¿?¿?¿ 

terminal Token LEFTBRACKET;
terminal Token RIGHTBRACKET;
terminal Token DOUBLEPOINT;
terminal Token COMMA;
terminal Token SEMICOLON;
terminal Token COLON;
terminal Token PLUS;
//terminal Token MINUS; // No implementado: grupo A
//terminal Token LESSTHAN;// No implementado: grupo A
terminal Token GREATTHAN;
terminal Token EQUAL;
//terminal Token NOTEQUAL;// No implementado: grupo A
terminal Token ASSIGN;
terminal Token POINT;


// Declaración de no terminales
// no modificar los propuestos

non terminal program;
non terminal Axiom axiom;
non terminal Declaraciones declaraciones;
non terminal BloqueSentencias bloqueSentencias;
non terminal SeccionConstantes seccionConstantes;
non terminal SeccionTipos seccionTipos;
non terminal SeccionVariables seccionVariables;
non terminal SeccionSubprogramas seccionSubprogramas;
non terminal SeccionCuerpoPrograma seccionCuerpoPrograma;
non terminal DeclaracionConstante declaracionConstante;
non terminal DeclaracionTipo declaracionTipo;
non terminal DeclaracionVariable declaracionVariable;
non terminal DeclaracionSubprograma declaracionSubprograma;
non terminal BloqueParamSubprograma bloqueParamSubprograma;
non terminal ValorConstante valorConstante;
non terminal TipoPrimitivo tipoPrimitivo;
non terminal Tipo tipo;
non terminal TipoRegistro tipoRegistro;
non terminal ListaIdentificadores listaIdentificadores;
non terminal Sentencia sentencia;
non terminal SentenciaIO sentenciaIO;
non terminal SentenciaAsignacion sentenciaAsignacion;
non terminal SentenciaIf sentenciaIf;
non terminal SentenciaReturn sentenciaReturn;
non terminal SentenciaLlamadaSubprograma sentenciaLlamadaSubprograma;
non terminal SentenciaFor sentenciaFor;
non terminal BloqueCamposRegistro bloqueCamposRegistro;
non terminal CampoRegistro campoRegistro;
non terminal ExpresionAccesoRegistro expresionAccesoRegistro;
non terminal Expresion expresion;
non terminal ExpresionAritmetica expresionAritmetica;
non terminal ExpresionLogica expresionLogica;
non terminal ListaParametros listaParametros;
non terminal Empty empty;
non terminal Referencia referencia;

// Declaración de relaciones de precedencia
precedence left POINT, LEFTBRACKET, RIGHTBRACKET;
precedence left PLUS;
precedence left GREATTHAN;
precedence left EQUAL;
precedence left OR;

// Declaración de reglas de producción


start with program;

program ::= 
  {: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   :}
  axiom:ax
  {: 
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   :};


axiom ::= ;


axiom ::= PROCEDURE IDENTIFIER:id
			{:
			//Creación del ámbito global del programa
				String name = id.getLexema();
				scopeManager.openScope(name);
				ScopeIF scope = scopeManager.getCurrentScope();
				//semanticErrorManager.semanticDebug("El nombre del scope creado es: " + scope.getName());
				
				//Obtenemos la tabla de tipos del ámbito actual
				TypeTableIF tablaTipos = scope.getTypeTable();
				//semanticErrorManager.semanticDebug("Tabla de tipos obtenida, pertenece al scope/ámbito: " + tablaTipos.getScope().getName() + " y tiene tamaño: " + tablaTipos.getSize()); 
				
				//Insertar todos los TypeSimple en la Tabla de Tipos
				TypeSimple typeBoolean = new TypeSimple(scope, "Boolean");
				TypeSimple typeInteger = new TypeSimple(scope, "Integer");
				tablaTipos.addType("BOOLEAN", typeBoolean);
				tablaTipos.addType("INTEGER", typeInteger); 
				//semanticErrorManager.semanticDebug("Tabla de tipos obtenida del scope/ámbito: " + tablaTipos.getScope().getName() + " y tiene tamaño: " + tablaTipos.getSize());
				List<TypeIF> listaTipos = tablaTipos.getTypes();
				//semanticErrorManager.semanticDebug("TT contiente tipo Boolean??" + tablaTipos.containsType("Boolean"));
					//semanticErrorManager.semanticDebug("TT contiente tipo Integer??" + tablaTipos.containsType("Integer"));
					//semanticErrorManager.semanticDebug("TT contiente tipo Pepe??" + tablaTipos.containsType("Pepe"));
				//for (int i=0; i<listaTipos.size(); i++){
//					semanticErrorManager.semanticDebug("Nombre de tipo: " + listaTipos.get(i).getName());
				//}
				
				//scopeManager.closeScope();
				//semanticErrorManager.semanticDebug("Scope cerrado: " + scope.getName());
			:} LEFTBRACKET RIGHTBRACKET IS 
			{:
				semanticErrorManager.semanticDebug("***** INICIO DECLARACIONES *****");
			:} declaraciones:d;
//		  | PROCEDURE IDENTIFIER LEFTBRACKET error RIGHTBRACKET IS declaraciones{:syntaxErrorManager.syntaxInfo("ERROR 00x: Estructura programa - Procedimiento principal no puede tener parámetros");:}
//		  | PROCEDURE IDENTIFIER LEFTBRACKET RIGHTBRACKET error declaraciones {:syntaxErrorManager.syntaxInfo("ERROR 001: Estructura programa, falta IS");:};
//		  | error {:syntaxErrorManager.syntaxInfo("ERROR 00X: Error general estructura programa");:};

//declaraciones ::= seccionConstantes seccionTiposGlobales seccionVarGlobales | empty;
declaraciones				::= {: semanticErrorManager.semanticDebug("En declaraciones -> seccionConstantes");
									semanticErrorManager.semanticDebug("******* INICIO SECCION CONSTANTES *********");
								:} seccionConstantes;
seccionConstantes 			::= declaracionConstante seccionConstantes | seccionTipos ;
seccionTipos				::=  declaracionTipo seccionTipos | seccionVariables;
seccionVariables			::= declaracionVariable SEMICOLON seccionVariables | seccionSubprogramas;
seccionSubprogramas			::= declaracionSubprograma seccionSubprogramas 
								| {:
									semanticErrorManager.semanticDebug("***** FIN DECLARACIONES *****");
									semanticErrorManager.semanticDebug("******* INICIO CUERPO PROGRAMA ******"); 
								:} 
									seccionCuerpoPrograma
									{:
										semanticErrorManager.semanticDebug("******* FIN CUERPO PROGRAMA ******");
									:};
seccionCuerpoPrograma		::= BEGIN 
								{: semanticErrorManager.semanticDebug("*******************Inicio BloqueSentencias*******************"); :}
								bloqueSentencias END IDENTIFIER SEMICOLON
								{:
									semanticErrorManager.semanticDebug("*******************Fin BloqueSentencias************************");
								:};
//								|BEGIN bloqueSentencias END error SEMICOLON {:syntaxErrorManager.syntaxInfo("ERROR 002: Estructura programa, falta NOMBRE_PROGRAMA en sentencia END");:}
//								| error {:syntaxErrorManager.syntaxInfo("ERROR 003: Estructura programa");:};
								

listaIdentificadores ::= listaIdentificadores:idlist COMMA IDENTIFIER:id
						{:
							semanticErrorManager.semanticDebug("**ListaIdentificadores**");
							String name = id.getLexema();
							ListaIdentificadores identifierList = idlist;
							identifierList.addIdentifier(name);
							RESULT = identifierList;
							
							
							//Verificamos si el identificador está en la tabla de símbolos
//							ScopeIF scope = scopeManager.getCurrentScope();
//							Util util = new Util();
//							
//							if(!util.checkSymbolTableScope(scope, name))
//							{
//								//Si no existe el símbolo en ámbitos abiertos, lo creamos y añadimos a ListaIdentificadores
//								ListaIdentificadores identifierList = idlist;
//								identifierList.addIdentifier(name);
//								RESULT = identifierList;							
//							}
//							else
//								semanticErrorManager.semanticFatalError("ERROR LI001: ID=" + name + " ya definido");
						:}
						  | IDENTIFIER:id
						  {:	
						  	semanticErrorManager.semanticDebug("**listaidentificadores -> id **");
						  	String name = id.getLexema();
						  	ListaIdentificadores identifierList = new ListaIdentificadores(name);
							RESULT = identifierList;
						  	
//						  	ScopeIF scope = scopeManager.getCurrentScope();
//							Util util = new Util();
//							if(!util.checkSymbolTableScope(scope, name))
//							{
//								ListaIdentificadores idlist = new ListaIdentificadores(name);
//								RESULT = idlist;
//							}
//							else 
//								semanticErrorManager.semanticFatalError("ERROR LI001: ID=" + name + "ya definido");  
						  :};


// Declaración de constantes simbólicas
declaracionConstante ::=  listaIdentificadores:lid COLON CONSTANT 
							{: 	semanticErrorManager.semanticDebug("**DECLARACION CONSTANTE**"); 
								//semanticErrorManager.semanticDebug("En declaracionConstante -> listaIdentificadores : CONSTANT := valorConstante;");
							:}	
							ASSIGN valorConstante:vc SEMICOLON 
							{:  //syntaxErrorManager.syntaxDebug("En declaración constante");
								
								ScopeIF scope = scopeManager.getCurrentScope();
								Util util = new Util();
																
								//Verificamos si los identificadores de la lista están ya definidos en la Tabla de Símbolos 
								for(int i = 0; i < lid.getSize(); i++){
									if(util.checkSymbolTableScope(scope, lid.getIdentifiersListItem(i)))
										semanticErrorManager.semanticFatalError("ERROR CONST001: en declaración de Constantes, ya existe declaración de " + lid.getIdentifiersListItem(i));
									else{
										// Símbolos no existen en TS, por lo que añadimos cada uno de ellos a la TS.
										SymbolConstant symbolConstant;																					
										if (vc.getValue().equals("TRUE") || vc.getValue().equals("FALSE")){
											symbolConstant = new SymbolConstant(scope, lid.getIdentifiersListItem(i), scopeManager.searchType("BOOLEAN"));
										}
										else{
											symbolConstant = new SymbolConstant(scope, lid.getIdentifiersListItem(i), scopeManager.searchType("INTEGER"));
										}
										symbolConstant.setValue(vc.getValue());
										//semanticErrorManager.semanticDebug("Construido SymbolConstant, con: " + scope + ", " + lid.getIdentifiersListItem(i) + "," + scopeManager.searchType("INTEGER").getName());  
										util.addToSymbolTable(scope, symbolConstant);
									}
								}
							:};
							 
// 						 | listaIdentificadores COLON CONSTANT error valorConstante {:syntaxErrorManager.syntaxInfo("ERROR 00x: Error en declaración constantes, operador asignación");:}
//						 | listaIdentificadores COLON CONSTANT ASSIGN error {:syntaxErrorManager.syntaxInfo("ERROR 00x: Error en declaración constantes, valor incorrecto");:}
//						 | listaIdentificadores COLON CONSTANT ASSIGN valorConstante error SEMICOLON{:syntaxErrorManager.syntaxInfo("ERROR 00x: Error en declaración constantes, falta punto y coma");:};
						 				 
						 
valorConstante ::= TRUE:vc 
						{: 
							semanticErrorManager.semanticDebug("En valorConstante -> TRUE");
							ValorConstante value = new ValorConstante(vc.getLexema().toUpperCase());
					   		RESULT = value; 
					   :}
				   | FALSE:vc
				   		{:	
				   			semanticErrorManager.semanticDebug("En valorConstante -> FALSE");
				   			ValorConstante value = new ValorConstante(vc.getLexema().toUpperCase());
				   			RESULT = value; 
				   		:} 
				   | NUMBER:num 
				   	 	{: 	
							semanticErrorManager.semanticDebug("En valorConstante -> NUM");
				   	 		ValorConstante value = new ValorConstante(num.getLexema());
				   	 		RESULT = value;
				   	 	:};
// Declaración de tipos globales
declaracionTipo 		::= {:semanticErrorManager.semanticDebug("**DECLARACION TIPO**");:} 
							TYPE IDENTIFIER:id IS RECORD bloqueCamposRegistro:bcr END RECORD SEMICOLON 
							{:
//								semanticErrorManager.semanticDebug("En declaracionTipo -> TYPE id IS tipoRegistro");							
//								semanticErrorManager.semanticDebug("**Declaración Tipo: " + id.getLexema() + "******");
//								semanticErrorManager.semanticDebug("**********************************");
//								// Obtenemos la tabla de tipos del ámbito actual,y verificamos si el tipo está definido ya en TT, si no, lo añadimos
//								ScopeIF scope = scopeManager.getCurrentScope();								
//								TypeTableIF tablaTipos = scope.getTypeTable();
//								if(tablaTipos.containsType(id.getLexema()))
//										semanticErrorManager.semanticFatalError("ERROR - Error en declaración de Tipo, ya existe declaración de " + id.getLexema());
//								else{ 
//									//Creamos nuevo tipo Registro y lo introducimos en la tabla de tipos
//									TypeRecord typeRecord = new TypeRecord(scope, id.getLexema());
//									tablaTipos.addType(id.getLexema(), typeRecord);
//								}
//								semanticErrorManager.semanticDebug("FIN**Declaración Tipo: " + id.getLexema() + "******");
//								semanticErrorManager.semanticDebug("**********************************");										
								
								semanticErrorManager.semanticDebug("En declaracionTipo -> TYPE id IS RECORD bloqueCamposRegistro END RECORD;");							
								semanticErrorManager.semanticDebug("**Declaración Tipo: " + id.getLexema() + "******");
								semanticErrorManager.semanticDebug("**********************************");
								// Obtenemos la tabla de tipos del ámbito actual,y verificamos si el tipo está definido ya en TT, si no, lo añadimos
								ScopeIF scope = scopeManager.getCurrentScope();								
								TypeTableIF tablaTipos = scope.getTypeTable();
								if(tablaTipos.containsType(id.getLexema()))
										semanticErrorManager.semanticFatalError("ERROR - Error en declaración de Tipo, ya existe declaración de " + id.getLexema());
								else{ 
									//Creamos nuevo tipo Registro y lo introducimos en la tabla de tipos
									TypeRecord typeRecord = new TypeRecord(scope, id.getLexema(), bcr);
									tablaTipos.addType(id.getLexema(), typeRecord);
								}
								semanticErrorManager.semanticDebug("FIN**Declaración Tipo: " + id.getLexema() + "******");
								semanticErrorManager.semanticDebug("**********************************");								
							:};
							

//tipoRegistro			::= RECORD bloqueCamposRegistro:bcr END RECORD SEMICOLON
//							{:
//								semanticErrorManager.semanticDebug("En tipoRegistro -> RECORD bloqueCamposRegistro END RECORD;");
//								TipoRegistro tipoRegistro = new TipoRegistro(bcr);
//								RESULT = tipoRegistro;							
//							:};
							
bloqueCamposRegistro	::=	bloqueCamposRegistro:bcr declaracionVariable:decVar SEMICOLON
							{:
								semanticErrorManager.semanticDebug("En bloqueCamposRegistro -> bloqueCamposRegistro declaracionVariable;");
								BloqueCamposRegistro bloquecampos = bcr;
								bloquecampos.addCampoRegistro(decVar);
								RESULT = bloquecampos;													
							:} 
							| declaracionVariable:decVar SEMICOLON
							{:
								semanticErrorManager.semanticDebug("En bloqueCamposRegistro -> declaracionVariable");
								BloqueCamposRegistro bloquecampos = new BloqueCamposRegistro(decVar);
								RESULT = bloquecampos;
							:}; 
  
 
//campoRegistro			::= IDENTIFIER:id COLON tipoPrimitivo:tp
//							{:	//Campo es de tipo Integer o Boolean	
//							//Comprobamos si el simbolo está ya definido en la tabla de símbolos
//							
//								ScopeIF scope = scopeManager.getCurrentScope();								
//								SymbolTableIF tablaSimbolos = scope.getSymbolTable();
//								TypeTableIF tablaTipos = scope.getTypeTable();
//								
//								if(tablaSimbolos.containsSymbol(id.getLexema()))
//									semanticErrorManager.semanticFatalError("ERROR T02: Campo de registro: " + id.getLexema() + "ya definido anteriormente");
//								else{
//									CampoRegistro camporeg = new CampoRegistro(id.getLexema(), tp);
//									TypeIF tipo = scopeManager.searchType(tp.getValue());
//									SymbolVariable symbolvariable = new SymbolVariable(scope, id.getLexema(), tipo);
//									semanticErrorManager.semanticDebug("Después symbolvariable: ");
//									semanticErrorManager.semanticDebug("El tipo es: tp.getValue()=" + tp.getValue());
//									Util util = new Util();
//									util.debugTablesToString(scope);
//									
//									if(!tablaTipos.containsType(tipo))
//									{//Si tipo no existe en tabla de tipos, mostramos error semántico
//										semanticErrorManager.semanticFatalError("ERROR T03: Campo de registro: " + id.getLexema() + " de tipo desconocido " + tp.getValue());
//									}
//									else{	//Añadimos el identificador a la tabla de símbolos, en el ámbito actual
//										//CampoRegistro camporeg = new CampoRegistro(id.getLexema(), tp);
//										tablaSimbolos.addSymbol(id.getLexema(), symbolvariable);
//										RESULT = camporeg;
//										}
//								}
//							:};

// Declaración de variables globales
declaracionVariable		::= listaIdentificadores:lid COLON 
								{:
									semanticErrorManager.semanticDebug("**DECLARACION VARIABLE**"); 
									semanticErrorManager.semanticDebug("En declaracionVariable -> listaIdentificadores : tipoPrimitivo;");
								:} tipoPrimitivo:tp
							{:	
								ScopeIF scope = scopeManager.getCurrentScope();
								Util util = new Util();
								//Verificamos si los identificadores de la lista están ya definidos en la Tabla de Símbolos 
								for(int i = 0; i < lid.getSize(); i++){
									if(util.checkSymbolTableScope(scope, lid.getIdentifiersListItem(i))){
										semanticErrorManager.semanticFatalError("ERROR VAR001: en declaración de Variable, ya existe declaración de " + lid.getIdentifiersListItem(i));
									}
									else{ // Símbolos no existen en TS, por lo que añadimos cada uno de ellos a la Tabla de Símbolos (SymbolVariable).
										SymbolVariable symbolVariable = new SymbolVariable(scope, lid.getIdentifiersListItem(i), scopeManager.searchType(tp.getType().getName()));
										semanticErrorManager.semanticDebug("Construido SymbolVariable, con: " + scope + ", " + lid.getIdentifiersListItem(i) + "," + tp.getType().getName());  
										util.addToSymbolTable(scope, symbolVariable);
										
										DeclaracionVariable decVariable = new DeclaracionVariable(tp.getType(), lid);
										RESULT = decVariable;										
									}
									
								}
							
							:};

tipo					::= INTEGER
							| BOOLEAN
							| IDENTIFIER;
tipoPrimitivo 			::= INTEGER:tpint
								 {: 
								 	ScopeIF scope = scopeManager.getCurrentScope();
								 	TipoPrimitivo tipoPrim = new TipoPrimitivo(new TypeSimple(scope, "INTEGER"), tpint.getLexema().toUpperCase());
								 	RESULT = tipoPrim;
								 :}
							| BOOLEAN:tpbool
								 {: 
								 	ScopeIF scope = scopeManager.getCurrentScope();
								 	TipoPrimitivo tipoPrim = new TipoPrimitivo(new TypeSimple(scope, "BOOLEAN"), tpbool.getLexema().toUpperCase());
								 	RESULT = tipoPrim;
								 :}
							| IDENTIFIER:id
								{:	
									String name = id.getLexema();
									if(scopeManager.containsType(name)){
										TypeIF type = scopeManager.searchType(name);
										RESULT = new TipoPrimitivo(type);
									}
									else{
										semanticErrorManager.semanticFatalError("ERROR PRIM001: - Tipo estructurado: " + name + " no definido");
									}

								:};
 

// Declaración de subprogramas
declaracionSubprograma		::= FUNCTION IDENTIFIER LEFTBRACKET bloqueParamSubprograma RIGHTBRACKET RETURN tipoPrimitivo IS seccionTipos 
								| PROCEDURE IDENTIFIER LEFTBRACKET bloqueParamSubprograma RIGHTBRACKET IS seccionTipos
								| FUNCTION IDENTIFIER LEFTBRACKET bloqueParamSubprograma RIGHTBRACKET error IS {:syntaxErrorManager.syntaxInfo("ERROR 00x: Error definición función, falta return");:};


bloqueParamSubprograma		::= bloqueParamSubprograma SEMICOLON listaIdentificadores COLON tipoPrimitivo
								| listaIdentificadores COLON tipoPrimitivo
								| empty;

// Bloque de sentencias
bloqueSentencias			::=  
								{:
									semanticErrorManager.semanticDebug("En bloqueSentencias -> sentencia; bloqueSentencias");
								:} sentencia:sent SEMICOLON bloqueSentencias
								| empty;								

sentencia		::= 
//					expresion
//						{: semanticErrorManager.semanticDebug("Sentencia -> Expresion"); :}  
					| sentenciaAsignacion:sentAsig 
						{: semanticErrorManager.semanticDebug("Sentencia->SentenciaAsignación"); 
							semanticErrorManager.semanticDebug("Sentencia->SentenciaAsignación= " + sentAsig.getName());
							RESULT = sentAsig;
						:}   
					| sentenciaIf:sentIf 
						{: 	semanticErrorManager.semanticDebug("Sentencia -> SentenciaIF");
							RESULT = sentIf;
						:}  
					| {: semanticErrorManager.semanticDebug("Sentencia -> sentenciaIO"); :} sentenciaIO:sentIO
						{: RESULT =  sentIO; :}
					| sentenciaReturn:sentRet
						{: 	semanticErrorManager.semanticDebug("Sentencia -> SentenciaReturn");
							RESULT = sentRet; 
						:}  
					| sentenciaFor:sentFor
						{: semanticErrorManager.semanticDebug("Sentencia -> SentenciaFor");
							RESULT = sentFor;
						:};


// Expresiones
expresion	::= expresionAritmetica:exprarit
				{:
					semanticErrorManager.semanticDebug("en Expresion -> ExpresionAritmetica: ");
					semanticErrorManager.semanticDebug("Exp->ExpArit... " + exprarit.getValue());
					RESULT = exprarit;
				:}
				|expresionLogica:exprlog 
				{:
					semanticErrorManager.semanticDebug("en Expresion -> ExpresionLogica");
					RESULT = exprlog;
				:}  
				| LEFTBRACKET expresion:expr RIGHTBRACKET
				{:
					semanticErrorManager.semanticDebug("en Expresion -> (expresion) ");
					RESULT = expr;
				:}				 
				| sentenciaLlamadaSubprograma
				{:
					semanticErrorManager.semanticDebug("en Expresion -> SentenciaLlamadaSubprograma");
				:}
				| referencia:ref
				{:
					semanticErrorManager.semanticDebug("en Expresion -> Referencia, Id=" + ref.getName());
					

					
					ScopeIF scope = scopeManager.getCurrentScope();
					Util util = new Util();
					//Verificamos si la referencia está ya definida en la Tabla de Símbolos 
					if(!util.checkSymbolTableScope(scope, ref.getName())){
							semanticErrorManager.semanticFatalError("ERROR REF001: No existe la declaración de " + ref.getName());
					}
					else{
						TypeIF typeref = ref.getType(); 
						RESULT = new Expresion(typeref);						
					}
					
				:}
				| error SEMICOLON 
				{:
					syntaxErrorManager.syntaxInfo("Error sintáctico en Expresión");
				:};

expresionAritmetica ::= expresion:e1 PLUS expresion:e2
						{:
							semanticErrorManager.semanticDebug("En ExpresionAritmetica -> Expresion + Expresion");
								
//								//Comprobación de tipos sobre e1 y e2
//								TypeIF e1type = scopeManager.searchType("Integer");
//								TypeIF e2type = scopeManager.searchType("Integer");
//								semanticErrorManager.semanticDebug("Expresión Aritmética - Tipo de e1: " + e1type.getName());
//								semanticErrorManager.semanticDebug("Expresión Aritmética - Tipo de e2: " + e2type.getName());
//								if (e1type == e2type)
//								{
//									semanticErrorManager.semanticDebug("Expresión Aritmética - Tipos compatibles" );							
//								}
//								else semanticErrorManager.semanticFatalError ("Expresión Aritmética - Tipos incompatibles");

								ExpresionAritmetica exprarit = new ExpresionAritmetica(e1, e2, new TypeSimple(scopeManager.getCurrentScope(), "Integer"));
								RESULT = exprarit; 
						:} 
						| NUMBER:num
						{:
							semanticErrorManager.semanticDebug("En ExpresionAritmetica -> NUMBER");
							ExpresionAritmetica exprarit = new ExpresionAritmetica(new TypeSimple(scopeManager.getCurrentScope(),"Integer"), Integer.parseInt(num.getLexema()));
							semanticErrorManager.semanticDebug("ExpresionAritmetica->NUMBER. ExpresionAritmetica = " + exprarit.getValue());
							RESULT = exprarit;
						:}; 

expresionLogica		::= expresion:e1 OR expresion:e2
							{:
								semanticErrorManager.semanticDebug("En ExpresionLogica -> exp OR exp");
								ExpresionLogica exprlog = new ExpresionLogica(e1, e2, new TypeSimple(scopeManager.getCurrentScope(), "Boolean"));
								//Comprobación de tipos sobre e1 y e2
								//Generación de código para e1 OR e2							
								RESULT = exprlog;
							:} 
						| expresion:e1 GREATTHAN expresion:e2
							{:
								semanticErrorManager.semanticDebug("En ExpresionLogica -> exp > exp");
								ExpresionLogica exprlog = new ExpresionLogica(e1, e2, new TypeSimple(scopeManager.getCurrentScope(), "Boolean") );
								//Comprobación de tipos sobre e1 y e2
								//Generación de código para e1 > e2
								RESULT = exprlog;
							:}
						| expresion:e1 EQUAL expresion:e2
							{:
								semanticErrorManager.semanticDebug("En ExpresionLogica -> exp = exp");
								ExpresionLogica exprlog = new ExpresionLogica(e1, e2, new TypeSimple(scopeManager.getCurrentScope(), "Boolean"));
								//Comprobación de tipos sobre e1 y e2
								//Generación de código para e1 = e2
								RESULT=exprlog;
							:}
						| TRUE:tr 
						{:
							semanticErrorManager.semanticDebug("En ExpresionLogica -> TRUE");
							ExpresionLogica expr = new ExpresionLogica(new TypeSimple(scopeManager.getCurrentScope(), "Boolean"));
							expr.setValue(true);
							semanticErrorManager.semanticDebug("en ExpresiónLógica -> TRUE");
							RESULT = expr;
						:}
						| FALSE
						{:
							semanticErrorManager.semanticDebug("En ExpresionLogica -> FALSE");
							ExpresionLogica expr = new ExpresionLogica(new TypeSimple(scopeManager.getCurrentScope(), "Boolean"));
							expr.setValue(false);
							semanticErrorManager.semanticDebug("en ExpresiónLógica -> FALSE");
							RESULT = expr;
						:}
						;
						
referencia			::= referencia:refer POINT IDENTIFIER:id
						{: 
									semanticErrorManager.semanticDebug("En Referencia-> refer.id");
									String name = refer.getName();
									String innername = id.getLexema();
									
									TypeIF referType = refer.getType();
									if(referType instanceof TypeRecord)
									{
										//TypeRecord tRec = (TypeRecord) referType;
										
										//Obtenemos símbolo indicado por la referencia, de la Tabla de Símbolos.
										ScopeIF scope = scopeManager.getCurrentScope();
										//semanticErrorManager.semanticDebug("name=" + name);
										SymbolIF simbolo = scopeManager.searchSymbol(name);
										//semanticErrorManager.semanticDebug("simbolo to String=" + simbolo.toString());
										//semanticErrorManager.semanticDebug("simbolo getName()=" + simbolo.getName());
										//semanticErrorManager.semanticDebug("tipo getType.getName()=" + simbolo.getType().getName());
										TypeIF tipo = scopeManager.searchType(simbolo.getType().getName());
										//semanticErrorManager.semanticDebug("tipo=" + tipo.toString());
										
										//semanticErrorManager.semanticDebug("tipo.getName()=" + tipo.getName());
										
										TypeRecord recPrueba = (TypeRecord) scopeManager.searchType("Tpersona");
										//semanticErrorManager.semanticDebug("Tamaño de la lista de campos del bloque de campos de TPersona: " + recPrueba.getBloqueCampos().getListaCamposRegistro().size());
										
										for (int i = 0 ; i<recPrueba.getBloqueCampos().getListaCamposRegistro().size(); i++)
										{
											DeclaracionVariable decvar = recPrueba.getBloqueCampos().getListaCamposRegistro().get(i);
											ArrayList<String> listaiden= decvar.getIdlist().getIdentifiersList();
											for (int j = 0; j < listaiden.size(); j++)
											{
												//semanticErrorManager.semanticDebug("Campo(" + i + "): " + decvar.getIdlist().getIdentifiersList();
											//	semanticErrorManager.semanticDebug("Campo(" + i + "): " + listaiden.get(j));
											}
											
										}
										
										
										
										TypeRecord tRec = (TypeRecord) tipo;
										//semanticErrorManager.semanticDebug("Antes de tRec.containsField");
										//semanticErrorManager.semanticDebug("tRec.getName()=" + tRec.getName());
										//semanticErrorManager.semanticDebug("Tamaño de la lista de campos del bloque de campos del tRec: " + tRec.getBloqueCampos().getListaCamposRegistro().size()); 
										for (int i = 0 ; i<tRec.getBloqueCampos().getListaCamposRegistro().size(); i++)
										{
											DeclaracionVariable decvar2 = tRec.getBloqueCampos().getListaCamposRegistro().get(i);
											ArrayList<String> listaiden2= decvar2.getIdlist().getIdentifiersList();
											for (int j = 0; j < listaiden2.size(); j++)
											{
												//semanticErrorManager.semanticDebug("Campo(" + i + "): " + decvar.getIdlist().getIdentifiersList();
											//	semanticErrorManager.semanticDebug("Campo(" + i + "): " + listaiden2.get(j));
											}
											
										}
										
										
										
										
										if(tRec.containsField(id.getLexema())){
											//semanticErrorManager.semanticDebug("DEBUG R001 - " + refer.getName() + " SI contiene campo " + id.getLexema());
											//semanticErrorManager.semanticDebug("EntRec.containsField");
											TypeIF innerType = scopeManager.searchType(scopeManager.searchSymbol(innername).getName());
											//TypeIF innerType = tRec.getType();
											RESULT = new Referencia(innerType, innername);
										}
										else {
											semanticErrorManager.semanticDebug("ERROR R001 - " + refer.getName() + " NO contiene campo " + name);
										}
									}
									else semanticErrorManager.semanticDebug("ERROR R002-" + refer.getName() + ".Tipo=" + refer.getType() + " NO instancia de TypeRecord");
						:} 
						| IDENTIFIER:id
						{:
							semanticErrorManager.semanticDebug("En Referencia -> ID");
							String name = id.getLexema();
							
							ScopeIF scope = scopeManager.getCurrentScope();
							Util util = new Util();
							//Verificamos si la referencia está ya definida en la Tabla de Símbolos 
							if(!util.checkSymbolTableScope(scope, name)){
								semanticErrorManager.semanticFatalError("ERROR REF001: No existe la declaración de " + name);
							}
							else{
								//Obtenemos tipo del identificador en la tabla de tipos
								SymbolTableIF tablaSimbolos = scope.getSymbolTable(); 
								TypeTableIF tablaTipos = scope.getTypeTable();
								
								tablaTipos.getType(name);
								SymbolIF refsymbol = tablaSimbolos.getSymbol(name);	//Obtenemos símbolo del nombre (de la Tabla de Símbolos)
								TypeIF typeref = refsymbol.getType();
								
								Referencia ref = new Referencia (typeref, name); 
								RESULT = ref;						
					}							
							
						:};  
			
 
// Sentencia IO
sentenciaIO 	::= PUTLINE LEFTBRACKET 
					{:
						semanticErrorManager.semanticDebug(" sentenciaIO=PutLine(expresion)" );
						SentenciaIO sentenciaIO = new SentenciaIO();
						RESULT = sentenciaIO;
					:} expresion:expr RIGHTBRACKET
					| PUTLINE LEFTBRACKET STRING RIGHTBRACKET
					{:
						semanticErrorManager.semanticDebug(" sentenciaIO=PutLine(String)" );
					:};
//					| error {:syntaxErrorManager.syntaxFatalError("ERROR S001: Error en sentencia Put_line"); :};


//Sentencia Asignacion
sentenciaAsignacion		::= referencia:ref ASSIGN expresion:exp
							{:
								semanticErrorManager.semanticDebug ("sentenciaAsignacion -> Id := expresion (" + ref.getName() + ":=" + exp.getValue() + ")");

//								else{
//									//Comprobación de tipos.
//									SymbolIF symbol = scopeManager.searchSymbol(id.getLexema());
//									TypeIF idtype = symbol.getType();
//									semanticErrorManager.semanticDebug("El tipo de la variable: " + id.getLexema() + " es: " + idtype.getName());
//									//TypeIF exptype = exp.getType();
//								}
								
								//Verificación de tipos
								//TypeIF reftype = ref.getType();
								//TypeIF exptype = ref.getType();
								
								//Si la referencia es una llamada a función (es decir, es de tipo Función o Procedure
								// TO-DO: Cuando llegue a Subprogramas
								//if (reftype instanceof TypeFunction || reftype instanceof TypeProcedure){
								//}
								//
								
								//if (!reftype.isCompatible(expType, TypeIF.IGUAL)){
								//semanticErrorManager.semanticFatalError("ERROR ASIG001: Tipos no compatibles en sentenciaAsignación");
								//}
								//else{
									//Creación de objeto SentenciaAsignacion
									SentenciaAsignacion asignacion = new SentenciaAsignacion(ref.getName() + ":=" + exp.getValue());
									ref.setValue(exp.getValue());
									SymbolVariable symvar = (SymbolVariable) scopeManager.searchSymbol(ref.getName());
									symvar.setValue(exp.getValue());
									RESULT = asignacion;
								//}
							:};
							
						
//Sentencia If
sentenciaIf			::= IF expresion:exp THEN bloqueSentencias:blqsent END IF 
						{:
							semanticErrorManager.semanticDebug("En sentenciaIf -> IF exp THEN bloquesentencias END IF");
							//Obtenemos el tipo de la expresion, que deberá ser de tipo lógico
							semanticErrorManager.semanticDebug("Tipo de la expresion del IF: " + exp.getType());
							if(exp.getType() instanceof TypeSimple){
								semanticErrorManager.semanticDebug("La expresion del IF es instanceof TypeSimple");
								if(exp.getType().getName().equalsIgnoreCase("BOOLEAN"))
								{
									semanticErrorManager.semanticDebug("La expresion del IF es de tipo Booleano");
									SentenciaIf sentenciaIf = new SentenciaIf();
									RESULT = sentenciaIf;	
								}
								else
									semanticErrorManager.semanticFatalError("ERROR IF001: La expresión de la sentencia IF no es de tipo Booleano");
							}
							else
								semanticErrorManager.semanticDebug("La expresion del IF ***NO*** es instancia de TypeSimple");
						:}
						| IF expresion:exp THEN bloqueSentencias:blqSentIf ELSE bloqueSentencias:blqSentElse END IF
						{:
							semanticErrorManager.semanticDebug("En sentenciaIf -> IF exp THEN bloquesentencias ELSE bloqueSentencias END IF");
							//Obtenemos el tipo de la expresion, que deberá ser de tipo lógico
							if(exp.getType() instanceof TypeSimple){
								if(exp.getType().getName().equalsIgnoreCase("BOOLEAN"))
								{
									semanticErrorManager.semanticDebug("La expresion del IF es de tipo Booleano");
									SentenciaIf sentenciaIf = new SentenciaIf();
									RESULT = sentenciaIf;	
								}
								else
									semanticErrorManager.semanticFatalError("ERROR IF001: La expresión de la sentencia IF no es de tipo Booleano");
							}
							else
								semanticErrorManager.semanticDebug("La expresion del IF ***NO*** es instancia de TypeSimple");							

							
						:};

// Sentencia de retorno de función
sentenciaReturn	::= RETURN expresion
					{:
						semanticErrorManager.semanticDebug("En sentenciaReturn -> RETURN expresion");						
					:};

// Sentencia de llamada a subprograma
sentenciaLlamadaSubprograma	::= IDENTIFIER LEFTBRACKET listaParametros RIGHTBRACKET
								{:
									semanticErrorManager.semanticDebug("En sentenciaLlamadaSubprograma -> ID (listaParametros)");									
								:};
listaParametros				::= listaParametros COMMA expresion
								{:
								semanticErrorManager.semanticDebug("En listaParametros -> listaParametros , exp");
								:} 
								| expresion
								{:
								semanticErrorManager.semanticDebug("En listaParametros -> expresion");
								:}
								| empty;


// Sentencia For
sentenciaFor	::=	FOR IDENTIFIER:id IN expresion:expInicioFor DOUBLEPOINT expresion:expFinFor LOOP bloqueSentencias:blqSentFor END LOOP
					{:
						String indiceFor = id.getLexema();
						semanticErrorManager.semanticDebug("En sentenciaFor -> FOR id IN exp :: exp LOOP bloqueSentencias END LOOP");
						// Verificaciones del Indice
						// 		Indice debe estar definido en la tabla de símbolos
						//		Indice debe ser de tipo entero
						if(scopeManager.containsSymbol(indiceFor))
						{
							SymbolIF simboloFor = scopeManager.searchSymbol(indiceFor);					
							TypeIF tiposimboloFor = scopeManager.searchType(simboloFor.getType().getName().toUpperCase());
													
							if(!tiposimboloFor.getName().equalsIgnoreCase("INTEGER"))
								semanticErrorManager.semanticFatalError("ERROR FOR001: El índice: '" + indiceFor + "' de la sentencia FOR no es de tipo Integer");							
							else
							{
								//semanticErrorManager.semanticDebug("El identificador del For es de tipo Entero");
								
								// Verificaciones de Expresiones inicio y Fin del bucle For
								// 		Expresiones deben ser numéricas
								if(expInicioFor.getType() instanceof TypeSimple)
								{
									if(!expInicioFor.getType().getName().equalsIgnoreCase("INTEGER"))
										semanticErrorManager.semanticFatalError("ERROR FOR002: La expresión de inicio de la sentencia FOR no es de tipo Integer");
									else 
									{	
										//semanticErrorManager.semanticDebug("La expresion del Inicio del For es de tipo Integer");
										if(!expFinFor.getType().getName().equalsIgnoreCase("INTEGER"))
											semanticErrorManager.semanticFatalError("ERROR FOR003: La expresión de Fin de la sentencia FOR no es de tipo Integer");
										else{
											//semanticErrorManager.semanticDebug("La expresion del Fin del For es de tipo Integer");
											//Construimos objeto sentenciaFor
											SentenciaFor sentenciaFor = new SentenciaFor();
											RESULT = sentenciaFor;
										}
									}									
								}
								else
									semanticErrorManager.semanticDebug("La expresion de Inicio de la sentencia FOR ***NO*** es instancia de TypeSimple");		
							}	
						}
						else
							semanticErrorManager.semanticFatalError("ERROR FOR004: El índice: '" + indiceFor + "' de la sentencia FOR no ha sido declarado");
					:};

empty ::= ;
